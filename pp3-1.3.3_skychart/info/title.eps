%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: title.dvi
%%CreationDate: Mon Jun  8 11:28:26 2015
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 270 275
%%DocumentFonts: NimbusSanL-Bold EURB10 SFRB1000 NimbusSanL-Regu
%%+ SFRB0700
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o title.eps title
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2015.06.08:1128
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 856 2013-12-09 10:34:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.21, 2013/11/28
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 801 2013-07-09 18:10:41Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: SFRB0700
%!FontType1-1.0: SFRB0700 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrb0700, tcrb0700, larb0700, lbrb0700, lcrb0700, rxrb0700.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman Bold) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFRB0700 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-224 -373 1732 955}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76F8A335A614F
892F1B79F1632A63C7AEB9B12A614AC7515A95CD6DB2AB4CF59847EF96024D09
3574B24F0808E796BB0999CA105F4EAA0C1CB53265E0E2546950028DE65CBDF9
B74A2AE92074643F9862D4E43C7A10CB05608FF1563AF1EA6594BA4427CC7D4F
1B78659882184656A67E67979258294CEE91EB0847EB20FFC9A09CBF2A3C64DA
03FA0245F17334D0B50D7F45C3FA462EB394891AFB88631108A4F31A3D423B8E
D058FCE1FFEB2C0AAF5CAB12FB5FD75D6D37161C57AB56E3C12273DDDE6679A3
6F456C9BAACFC179B2F68DF99802D28286BE538DD57BE2066C11AB3D35E3FEEC
FE5525F6DB5395AB60902262C49A5F6B77E2FAE7BEC77C1565C6C17700BA43FD
3DEDCFD0F2AB9E891DBE5ADFC1217966FABA08880447A0708971F3844896056A
C2C981272A2937ACB671EAEA06F643DA5FA85293A82ABE3A3DC56D9DBEF48998
99CE88F7FCDE2F9A9ECC5859D1726C7AEEB8F3C5D03E0CF60B5792810A59A7E6
FBF359A97947BCAE80C392DCFD8B518E850A7C7E8848A95F577B2F5D2352D82D
420D63CC1DB77B219AAE601E2A3A7F0A2A6CB0822D06EAD16350E02D4E31A3BD
A7B6BFD5B6F38EDBD9660E61BEB67230D202E94E748C192D04ED58E59B6782E7
75A703893A750D2199BB73854F5DA38A04FB67396B5D6990D3C9967E6C649481
0DACB6722615A1B95B1DD682CAA84268D65C8DDDCAEA17D3DC2AB77EFCB39D70
F1E8A33CC946D421B422B82697C6D7BC353EBD3CE2827B388FE9F867DA544615
AD22FD323BD29DC4CAAD3CFDD8738115501B3A2C052D5B8ABC69994A576F5255
3B806DF4EB45A4B062E1DD1B32351F1BF51BF79F96D5305F34F7579AA1094B7B
4CEF447A77E15388A0802D8D64E22431C96F866B5AC13A86EF3DE57BB3DE1916
6298EBD2184DB3337DE9B0F344029B4FAE03CE099C607ACF39E66C752AAA7914
54BA018054CAA7D5FA06ABB74CFE6F51B35AF9D264B7CFFD26B40E9247057868
3E687B1949CF9E7C3EF75943A26CB89B3478FAB7895D90AC79CF8D3CF8515D71
91E0DB70C69E5A25A667F93A7F77691670F5D42E29A509EFD1DB3D9868C2D687
70397C7B4173F3C10854FE5A358A6D9B700D894DA78FD0AA9596C9AAC3B6FB54
33AF7D292A3D727C050B929E4A2B2F1131820260AA1CCCDFA0E55157A285B091
EE0534588D0E32EFC3018E5CEC51E5EA8F51CFDDDB8C73B21F8CE46D2AFCC4A5
5CF81BCB8031D291D5F69533EE066D22E66939BC04856CDC71475CA6505C445B
BE4685A27C279D48E8716CCED0FC066E8B1E5C8BEB2B5F75EBB42D9833B3F245
DDE4A1C6D8B7F87627FE1D069B8AE624EB81179E351A119922DDE85BFDF2091B
9A4BC0B61D63FD3E991F113A5346AA4BE4934AD429E1F901129B5FEF51E9EE02
C0314E434723BB02264DF7B0B32DC510CE204B86B9AF2BAB4804B391497E984B
F7D10FB5CE9ABF60849901C5D90808D77A121DDEBC91AFF565EE7B8E25ADD5FD
1B8E8FE461B8A93035C70AD78DD0AAC140134D5E32AD8B11FBDAA0273105F115
43F8133C32AA1444A5B7BA26E8A9528E5B999EB9F43FA3575F7FB6C191B2796A
7672ABFAD8A0E6E05430964BF928543168A40B1E0F996E99C8175F673A2C8DC6
A9D33CAB71E26972A0A9A78CC9AB96B6443B97E9E16C770DFF9FFB32191D8B37
B8CB285B76C747047E31834E479CCE6BD4AD8366BE4714DC4CA7348F28E709C0
044E17BA4FE83ABBCB387F0C32FBE96169D38F2640A68E4799E251C10CA8A814
A55C167D10E40E9EC219C287C23A2C6C313C0A6B57B6311BD327C048DF60F8D7
B1FFA5136753451F75F7C78AD358AB6F1AB50FBFB251B11A90679E666ABD2FDC
E2C81431269C6E4A2F67126E606E82C84529A85A8C2816E4F17C31575E1DEC0A
71AE6ABA94387BC6A7A14AFD141FF208F188012E3D08E568308CC30A373A2329
2B4BD5EC4969A9EF331BC01AC4F1465E19F5BEE29A0514182B9FEA14CB6939F1
3BE6A94F273E0AA2AB637C2AEBD18A8297C4F5AC7D67178C57465C724795F8A5
04159747149E833866BC09044F3AAA5C9B1F2BAB2A1AD8F4364FDFBAD04404D3
BF5724E909FF5EEB4E8BFF55EAAC33BC9D7F764E083BBA8A2D579ADED78B89EF
EFDE0ECD1927BD85A7784BB0563BB4AE60CB666D9C8704101CCA25014B8E0536
74EFCA2F98F740D8BBD4AB73AF780A3D89889E631538416DE27F25A5E14C6A04
CB5DF676A80C637A69591A41722A0513DB930A456E19DACC83FFD291A242F159
C313B12A40A078BD25BEE0BB77983BED35A08DBAB56CD4E70C2EF79D2210D271
13B9A21FE903863C24A2F1FB3B9F9825FDA489C63C45C0CC72DCA552F815906B
AF60486820AD219033ADF8EE59614415C735F8FAE2223145BB51112DF5FB249A
07431EAFE27409C51833946CC04FB11C6A542916EACB67AC9A4AC2BF56576CD8
57E68E315C56035A8FFDC13C04EE145CD2C4652DC518141E6BF04F839FAE6F19
1ADA61A25C0272C7D47E2F9880EF50AAEF2B7AA3CD0A3C36F5D7A830EF895CE4
DD39B64ABD272128AC7F58A6500F800661DFFFB9B96D2AB7F85F44CF3380BF61
1925E1EA0B2B5B3D0AF14206400DFDF7BF83F82943872FEBA0467E54D98B78E1
7BD39CD5588CAAD1E91614F1FC347103FE5AD10585DB99D9BD209BC8853DCAFE
DCE725943116D297C76EAEA40C43ACC6A5167A044E3EA306028E8EA4C2469618
6AE4B87989937753F7864CD4E70B46EB798FC8D7E092701641598FD8819D9110
FA301EC3C1E935772C9A2C05A2FEB46984BC19BF6E34E5623D6072E3FAA18600
73F3CCA3F0C3D790FC1238233D88444728ED3E1239D377C6085B039559197A2B
88D42AD04259C849EF68D115F39AEE5EDB6B0A4D8CCF232FC7BBC1ED9E4F1C10
281CCC98E0D1C4D504753344BD875E62BEB43BCF34678484A165A7FF234692D0
10FB874534BDEE62E99D8C393EF619576A29B00ED5C55AD867DA98A0D2CFE11B
861C86EC5A1FE2F6E50D3580C483896FDA3C877A05B8C1B1C48ABA276DD8B581
B43DF88B7552DC8D30678100141C1D79AD864021457F78D3192ED99299F90990
0F730173FC1317D52E1452A70157310105C3266788E2DEC93FDCF70BC0C43B5D
4AAF6120B4AEF2400A7411F1D9BF7699B1914C06FFC103D614DF53994CE65A13
C4E5FD081E7EDFB48C71E19E43E7F971FEDE25E3FB6EB45C2B8B4688D2710611
70A1A5CF4295B07FFA336F406CC91C048711EF040EDBF7983B32A0B1C7879DFB
32D945E18B4BBCE5E6797EB0789F32349A38029B25D522E3FDA1159FE2500534
8C68ABD6BEE02E18BECD74CD8CE3D80404F7691647CE5A30AE47439BD708034F
A5D50D15A83A0B408603C9864CD99F25FF2267AB438138B428A2F6BEEBFF30C0
9354A99608ABBEC8F6ABDCB407CEE92A6F3D5DE9F1E091924807BA88A8591421
B823DE9B037265CAA576E82998182521E9472C3BAD5D08FF9613746C405422C8
FCF7778CB277E9E757950D857556EE412F40FF2FB4CAAA72F52B28E4EAA659E2
FAECD0289DE98299A9068E7806C06C381F7B842AF0EC0426EE926FB26CE338CF
E5F50CF1E5FBD588940E16C7367A9D81B06F7786B32472AD3B89FECB4B38C292
590AF5861B20E643500FE3367FB78108208D4D86AE19E0E180AC5882C5E1ADD7
A797B90B79A821F78734B9E1E5A858242AC7138493DB18023D6CCF47B38961BD
CC60FB8C6330A30AFEA00DEE267FDE5F69D29B19233ED4130D20DB5540A10786
B8725F5F9D407FE21B350011437B0F63BD8F0E72C849D8229B736986ED661C8E
50C0096DC1639332651BE480828C990BDA3E91D7106741D2E133389BB0DEDE92
605D17F4305D748B0F70D6FFB3B06D23D55028660640D7E17834F1C75FF76DAB
5F24004771961D74B39533FAAD78F695DC2F301F4EDE4D4B472A362FD4BAFA31
DA0FF7FCAB37DC5376219237ED0C257742777F6219F47D81AF705B61AB940AFE
DC511F8B1A168DCDD7711E90B75801F6418BB909362DE1588333A83805640C5D
11312C76192227BE4D134363601265CFDE86EF6D5702EC41D94BA68BCE7CC3F7
85BEF436C7B0C571138344A2633647BCF502A77F12506C02F1A47BD9AD072342
07CFA9182FA380537800836CEAA2F3F1716F05FCA1CD2CE148077DABA33F7F30
4648FBA9A2FE827D7116F771F3F48EC6B86217DDC96A6E1992573F32EC6ED550
1D2767BBDFB492F8D0322AA7F265EEDC013E1ACC6714E7211A1CD6050CC3237B
A7CBAA7FF5B103B7D8919E60BD887421EBA706DD61282D44B86C61B9DF3CA75E
FD6C3613033BFA27E3E7E29AFF0FD6F9A13900211CFC75CC8DCA6129023704D7
21A6C5468121F11179458FAD59D633FF0B0DE1AAB06DA97E8CAEB333131540B3
5E686E35792AB1F41774FFC12FB17422B911491BA13544B8A546A626C909CA37
AC9AF549C06ADBF2FEB71A1B0677B49D099AF79F4809CB5810877708A97131B0
B8B3C7E7C0DA34E79D858D0C734F0C3FB9568C4A7802F63272C3658AC2D48364
F8273880ED40DACA3BC49CAF43708E56F30D6206B504D7A2599562C50574CDB0
A008822C1589E39C3400B20F87F872102C687B7362B3FE224338583E1D059945
CDA49FF76E375676DD7139F018998F21E677335A8E3751C281AE952002863D00
FFD476BE220C6E6C5CB9BB9A516027A9F3DB3238970FFEF8405E20CD72FE83AB
5351D5C61B0415FB578D4255B38BE0A5C8B360F09AC45E12B77DB6B54C920160
633B59C2DB99E7AE996404D020E796B95AC00C6D0CDE350B4F8403A126B6EEF4
706DB41E9274E778A2FBC6C43CD846E9F38EF81423D30DD12F17262522B36413
5420ABC88DB06E31E058111C0CDCBE72A0E14BF19B4631F1869D30D6F733B7B7
7C3E014EEB5D027348A06F72F56A132A088F02C5F80DFD461641C4FE9D86A193
864FCD014C17049A98F10329E0FABF4810292783D4B6B449E0181D69369AF612
B3A27D8DFDE6C38B3B46BE617201E0F30D5D1339D57AE2E8E54549F31D5077D5
D2287347225F6F0EDCBDACB2844CD2797162D722BE1B12C647031D8296B53D99
DB83CAA661183B06B12F9E0DA766F8D6703E2B73FBA58BCF40E25FDDB886CC3E
DBF9CDE6C5D8438D9FB3D1B58512749BFD5C15D966F3458A8F7E308918A4F03F
630C7EE7DC360172531094D9E118E0F08210ABB066C75970B5E304795E74DDF5
C1B8402045BCBDFC3C565AD43DD5CA96475CC6DFC997B78F99C0AC8964EAAD70
8389637FF113EB1E99D26BCE3FB9A284388D560D604613C61F0DE317AABD5C98
EA1018F08F735FF14BFAABDF9E19257F6D6A72485DDFEF4894DBCA3F2B729F35
2286CD7622BE4083619F5CF7C0BBCF262AF6C06E84EA15626D93EE7169D5E236
B8D93BE40A7292789867D1C64F9C1F12C5AA2F47B81FFBE6CFF6F1552E9B1677
7F488F46CA06D7E62802B8BCE2D39F9B2E13306A491B18ADA58C791D1F70C589
B66EEE9E4B4671241A61E61D9492F9B8173A6C4E25FC6A2F3BADAF809B06AC87
8EA65EAFB71E1CC3355989AC464FF6C8C380A99E72CE64CE1608B14A11119450
EB02A0D45D431452CF41D086E2DF72F8068D9415D8AA4276A0206AB6FEC3A50C
9E127C0B7B90A4C138339626BD1563B6B6DBC8BCA5DCCFA45FB433E24382AF20
6B779FE8724B5C2B2BF9879A9842D43448BDD4E976C9B5CA81DCBE00B52B190C
DEE6AC380DBCB7C2B6B0B8E517904E1F929A920E2A21D37EC0B839FF9E5DE6E2
A3EC3FE2B22593F7EDADA3A7DD72A28C66D1E5D6AF8E0B69197F45B2970824C4
6FFC67FEE6C233DA72396FB02CA8FEF6405558CD457E280980147F7D773D0C75
B3EFD4BB681D271CE0AB8E56F9A15A8FE4216E8810EF78EAF84CD221BD31F681
219626C8F940264F42FC6462A65E1D6BEBDD68397EDDD94F90B4F59050A001CA
100C362812921ABB162AF37BC5271992C57001EA90FE51685E2301ABE52CAA79
A84BC911D294B47002F11E60613F6064EABFCB5706CEFE4F1C05E9177DF813B1
48C1A5BF25EFE87D508C07FFA4AA59AAEDB2E35B4C74FE4D777E05DDE6DE94F1
8E7C5E64EA9F87278769BB6D7D137473C28863EA68B59D4DB9E5E56D8231A746
A71AA8E3D186FA40713C2AE046A8B9A61702BE97D8CF7988516F5FC74311E2F0
FAB9225C8CCB7CF035013420F1AB3ACBC7B793CB50484FE730C540D33E727B29
32C146FC6F9DDBFE7875E518A35B6256A2BA42DD3B5E388B99CAECC46D2D7526
C5F55FD0A9230EE29C7373008D96F784D79C2F0ED83DC818861A844DDDACBA00
B037D6E1860A6F0BA32E8139E79E32C1391BA053E402AB357D2C9C43E897D847
6E6D1B91093F9D5CC7BC2512AE9CF2666468CE72E06B401EEA68B48C6E025989
C1D126BCEA24D63DB8A8164F9DDBDB416F69CDB2B6F8C21A25873990874D9A77
3A493AC6D7E603D54C4AA227E255B9D9265E3643C44FE45D74F8B75D465C023B
08F7D87838F62A6CAA01A20DC03233B24449AC14F493E5179BDEF27BC2D79166
9B8F98A373CC8AFD02E22FA8FBA3F1B527952397C18CE43BFA1DDEB499C71ABA
3F032BD9FB5DA05E0365227C79AE174760C469F41C29980E8B3343550BE7B3C7
F55E4F808E0421C66D028E875CB404D02520B4EE1382FE1A6E115D2A323A080E
CAF450D8F345E47748285E3A0FBE7F650228C5A1936CF0186EDC65425F4E8B5E
F9F9E6AE360976E90FE544E0CF55CF3032EB76701C814FC035CCD63E3F14284C
0E4E944E1080623ED1AF4F198FE674525D8BBBD61B2BB33D71E786ED939E56C4
BFB07F9C15C6D1321FD7FD64C5AE77263B50340B51838A6B7AD79EABA229E5DF
3BD08615FC42BB8EF26D1B4477B1D4B5449A1639090DD0F6324AECC2549CD638
11E2D7BAF6F8DC627B76F2F0D593E2F73E9D14B1D8CB415F20F739EF1B49B522
88CE33818380C1756BBBB32ADF930A9FFFA13E7BB9C144AC8B1B4228292A4222
64BB99414B3AFB82E9BAC5CA56F19E724FC57E8FA56DE29AF2E4E5649034A624
18DD23B5248DD94982C089A670C8FE17D296ECD9627CE17157F1015F0B21F93B
115D445AE0EDFED917DEEC7433E52D6DD2B8DC10DBED36512EABA0523994401E
ADBA2A880F479A9ADB269A53C2AA6BFF498312E0B10F880006C7889F1E640A05
4E16D692F87103C231C41FD7521039F9AA39474AAF3390E3FBCA5C7224D60727
CB0CCB1AEC552DF07AE8D60245FED225CD51518B1582311FF2EE1316317FB54E
43C104578710AE65C7F2726F87EE721A8BF78F9F0AB6754CC6047783E14CB5B8
A014EDEFCC0999D759E35BA59FE2DB93F69CC6C078D74B6319CED0D207C80CFD
06C0339634DAB87319E9E3072D79559B3210DC48731A202E0CAB8A069A9EB514
E0D22106A5B73C94BA4A7871274887D955B77D1726C75BEE6B1B4FD1325B22B3
ECAD7CACA192E8F551ED7A230BF9E13BAFF397113464910556DFBBF4AEC7882B
7A0C7218B75F1057F04A371B8BE52C137A8AF44E2EE4DF204D14EC77EB02B1CA
F86F4757444D27B997221A9F9F6F0A57F1BDF8FE05F4BAC0C694ED24F849D5B1
6C48FDBFFB4A0185E38601F50430890BF5FF13B4D6B761FAEBAEDAB98D3151A2
68EBD36FCB34A44710846BAE7B5B31A9DAAFDE3F0A7DB4B12F0902609FEA7229
8D6AEC5C5859BE1F96941A903A9AAF5079B5A41C0A3D62CE990E62666F6490F5
277F31C773DE4CFCBC17249F1878A8F144F353946D26E643BEF04600F9E86AD2
02C659BCA767918EC9225192DCF9AF7F440ECDF84D85D3543D9C390A141B4886
FE0E902066F3239B8A8DE31F99BA6044DD3CCC33382D8DD643900B9DE5B6FD10
3D2DE1F3B1EAA88042FC738A2DAA04D63516D012A2C4E38E50C9EEE4FB88FBF2
01D9E55B2E3AE2892888F59BF0193A648A1665E1D6872B1FD8437F11FD99EE2E
B7F0959FFA480FF4A19D7D4A0B787924720290F7E375E2D3B8A10E9175B1EB9C
13A19D55BC8A10A18981325EFA980FFD9425AE6587B653647EB6D771E3B645E3
CD1359255704F640E27990D9B37373F5C0D54167E37CA1A49A7A8B565A467ABF
A9840B9B9CC2987BBC73557BD09FD6125B8411660B1B99FC93B1E95328D3083A
5CB307D6FB9327E2A33D991D6A918B13A5EAC18851454064500604048EAC8F69
69F85D7A5BC7D615794126863E33FF9EC1DAE4383ED0AFA4C6E7E80C73B520D4
CF563025780BCCC9D8437F7E214B87C48E4ABE10D1818B6D5949FBBB1E4AA379
732957AC35E0677B86AECAA35C48BB64B4B9DE4976D3C0A7410DE056D81DFBF2
D17F3E59108C5508D4CEF36004AAB0464D019F5B13170730EE732943FC68BA13
596FE0F5B5FE22A12BF5F6758FE2F2FF3205E93A7E76590ABC46654E41875AC0
FC8E61F4EA1D73A587311A3D30DA5E42F92617DA74F2CE02AF56F3070426D5C4
37901FECDFE367A13CB1CA23A33617374E0870F0EBF5ADBF86CBD8298AB19FA8
CB9170BBEE101A6BB71B3C3FE0F42DD58B4701A8012D3C08F3AA38FC9743F598
E32BAB0C290380675C55BB5D25990858F995094ADFC1F9CBE45876DDBC0DDDEC
A8A5213BD61DDC06B0BA4438146AAAADBB3A47A96BCFF12B1444C30DFD8F23A4
49D50FD59037680FCD3E47110F4CC1E8397872ED1E0FF826B13593FE6A5DA1DF
7244022CCB56D8F1653FCC629B95AEE4223AADCB21A84A435B82D56EB1E1E963
1A82643ABD4A03802321B4CC88272F13B6E490FF52ADC10A564CF6BCDC9930C0
4D361AAF58BA70701B18DF73D1F24C6D8A0E21BC8B4A0513829F54467BEC8BC7
275CC177D9E638B980A7C3576AF211B52B57553169C1EEB83718948E036BB68D
60241FA9AC906AB0775F80D8D3CF50D2F1CF281363B7DFAD216D26ED6F9FFB5F
C39841F68358989E2F9B20B3E47EEF53A2381518E3FA677239F648ECB5233FEA
29B1AFBA7D74B2CC4C702BA0CCB76532F18570ECDAEA84C48861B2D1E68E9CBB
AB052240546CAD517E81266CCC56DFD7507B221089BB2D21D29A544ADF9EF1DC
BA59F8537C8A452886EABC2008C54DDBFCDA7CE8E11C3F366DF26645ED27E09B
090CA9326D2B50BBD3718C0135B45F94E83B6107150C7E075CECA7A1DC627630
5518DE71EC207A5BD9D56A985F1032B0C786713F2E8F1BEEEF87FE7B644F8F81
69FFAB5B8D33D662DAE00DB4BC60E288D2204BBAE0D257B035051254C1DA3384
CD6C48B1EC2B894428FA7AEF04633C39C73AC808418FCDEB08CCE088FC7549E4
25D3AC5C0B5409E0071F29788FAF24F4A3E74D6E9DD8B526EF02EC5DDC3040E3
8CCCD93A65E948DBEB79D4B38CEDA90AFAE63EA0A9529192B990DD89155E8934
86EEF8741C740F9D6D3D9110DEC6F174FD8B2D5314D4539EDC3D52BF3D0EAFD0
0F03986014CDE0A243783ED844A055B3A6C90A3A725C0DCA533BCF18F1F156C0
650D4A0B81934AF360EC59638C8578801AFEC9242AA479632F9ECE970F382EF9
13C5FBA5CFCC0057DDC8A0D4D0AB9FC6C322E27FDFA3919067E6E22D70E7BEB8
1CBCF81E2BAA51CE0B6069B256F5944E440124BDFED978189A3285E5F14FE007
401E3B0121DDCD085D78394C41858E282D58BF100A9A5818D5A1793EB14120CB
E630A474FC6296EDEE1C48D6452C300D13B6D67AE8B863082FDC66486CB43C15
22D0D8234E1BC69AD30D3A037DB040BCE16A82B703625A3B1D46A318348A263E
8CA37516D51F58B2B8FEB1DF7D06346EC0D1CB7CA929B2334C7B9422DAE88E2C
5631122F0400E563C58CD6B6D16ED82C460F552014854FEE6BBCDCD6DAF73334
87DAAB5D9C33B6A939545360E6A2BAA8096D5D15D997CB6A9E6EA4530B22DB96
758990DA46A5B70DD5203B533ED76DA24FEC64AA1A5B3C76FA3E1A7EF97A4F4A
2BA777FC82B4A73B244C51E0EE325204D7621C78FC5CE6CFD00B7EB2FC59BEE4
55F28CAF29E9DAE32D3C3BA9DA4295078D084563AABA0045D422907A89C771BC
EDBF4CA710C8A46B6C456056830DC4F5163514F43D9EF6B8E09A092BB0322A3C
EFC15BAE3BC88EBCD90CF3D97EC8E5082F599C53C3768B4C296BADF90E8319E8
0A64A2ACDF7B66BEA904D529E005007E3433984DCAF3B24A91B77DD4CC22E516
C5CA5CEC13D1E748D5AFB5D301DC4403A087EDD64FCF30C770953922F0110B89
0971A8267A5E0AE0E5A9D9DDD772E8BAF6A443C80F6DCB687BDBF9BFD66DC60C
3D15AE5D01B4443FD76D1FC1B8D5177921B9883C1E62009C8C77F39D3B3CA010
CC9D0192CE7D55A18F61A2AD13082A5C101CF8D876DC1E45FDD01A683A2BA843
76D7E7253D7E3479B0D90332511D4A1879436E166811918E8926326E64108B0A
BA1635BF1A520B1B67BB5D60D337C208EC9F5ACA0DAA2BB203E7227495A53A9D
1E18026775B4224D2894309F1DD34AEC02EBDA16C41214FFA23EEE44C3C856F1
0832C8FC19C9782B0EFCEA62D9FCAEB9E12A465C8B54A63AE2EE076A49A29126
C9FE9CCADAFB4337F941527168CFD7AD774C93CBE99565B911B16D34E5AD11D7
A028135C0C876C636F31A9E0B790BC6AB44B240E947634E68EB776C6BACBD442
E91C82E42ABB32A1595871E3ADD1369E83B1F17EF147C527303A6C229FD75CDF
A359A0CF417AEA8B547FF7F9A9CC9B9E472B094AF4CA2CBF05230FA026189872
5424EE291F44280565C29DEDD8BE8C10F306648DA877C1E3EAD90FAE5FF7AF4B
8CCE095EA5A433E787DE9ACB4270AA4A2CA44A6B898ED798EE0972FAD934D371
A74B3E5F1DBA970621A8ADE7535D52E256FE158095475DAA88183FD9E2B52DED
6C8021390F1882A6BC87B8E5E649DDB4E7FCFED7C21CE3CB4ABE0686F6574C89
4DCF6EDD94CB9A53B64E6B73916B753F077D6AC4D29579B6B21F8791701050A1
DB9DA59A75B5F46CB4229D6E13A7C257214DBC31464F1118F94E0AD8C47E64FD
0161DC064C96B5925E2142E2E431B0E67A5639E34DB86D9E514F31F8EF7115E6
7207A8E469C095737B64942E54555499A2C564F080D8F4B3052A4F33065C6845
8D28C670CBFF1BC60AF7AC24764750FB3C48325C552F14CEB97330118FC6A7A6
54712F18C80A39605C965166108A892671B11DD33CC102F70F1D2801197EADEC
32844428757A3E5FD42AFA2B8386EB5DDF6B57A0A8CB7F3276BC13716F632F33
6B2EC04E12217797A80092B2A70BD4A19E5F06EE8D5BCB224844AFF9AA7F7440
2D67752993C0247B96E53FED60C90214B80724BA5E7DBE24145F3841E352111E
B419EAAAD9941861355B13CF4D19836FAB599235F6DF9F824EE4C20B1642B77D
1283624B0BC5A48811F8F212957BCA9AB9528E879BCB883C93AD7F4AC9D34DCF
5C41C774F5F5B95A74B7284F8444BF4BC713FEA091B9B0B392BD50B564A47878
CB4832DD2AA8BE75071D81F9578FBA89B6C81ABFB5DDD8611DD2A54071952A8F
C57C331FF687912D6D573CB77727AB3BC6462C1B6EBA112970A77DFA024A0C3E
ED363F7DA89E4ECCE87128BF7172F02782E682E274508ED53F194AC51A3821B9
5D1AE9332FA0D1D41114B05B45CF0AAE46D117F1A0394D0BAD6A6D3180348A2C
891F8D6F15A2E82B52E5C2F883659EF9C0923DC080CC3E496B7213987EB96A2B
1A1851D756D20A2C740CCACF6AA5E16CA24288F6E8091F758D8B84ADC5C6A9F2
D1D039AE4D632BB23F86EAE1B0295DB72601D74FA03F86C0C524A4CB8F29EC3A
D93FA9CE4FDA0843C416D38C1BD3EE71781A85E660CA2A0D6AB5A6EE8BC58B8A
DD033D6A0D6EB7DF33C97C89B67A16D8BADD31C832B48079CE7577BCF19EEB04
C15EB94BA1AD3A9E8E132B0E02DBDD5F6D9AD0394044E42E9E3AF0284B78EC00
8AA2B3B99676E966A450535FDBEBB59F1BD0D806479791A77D5F70F6DE10AC19
3A4AFD107E49D628AF8BF48E47594B3CD7870B432482FAD1DAEE7C7689100691
6F88518FB841260995D44011BB4E749D3CFF1318844E340C353CC00483AD766F
8C590A132E2CDB9F75B17B2F16E43F5C430D27ED58F59B1239855CB5ADA7DCC9
E4CFFD58FD013D9EAD2D88B01654F4C983F8190893A0FC4E93B51158441BA997
0D09F4742F701660B9C2069076EA389AE2391E438AC19F6B691AFA7AB9C5C94B
11A5DFF777086158304EF1AC05D1D90B263F9CB022B8083455D8096D73F650F1
4CFEF80336C985D0E66CCEFA7384F171144D38BBC8B837790D1344D5B30ACC69
E0FD328E021294FBF442C8C15FAD97359934656522496D357B6700BD31AE98FA
27E90FA941C515C88CCA35CBE553649DBB6117A1B74FDD47BD4F4E7EF4493B93
A7A4CDA6D2BCCF6EC3072C6DC54F64F32451A5546A8BA30FBDD600E8C77470BF
4FB1F305D380D7C1736FE0FB86C519C107F66C75458A4CE2B431458BBC8CB553
66ABB418C1AC9D1C3AF2954D5AAFEF35513B7043005A0C545A3CDA79AF22AF3C
69EE2E25B2FF40386ACAA06BA208FEB6872FD35E37CD7F63B44A957310BFBDA2
645D0FDE0841FC6C24C2768B11F0271139EA424ED9F217495C8A3D142A95AD5F
002363255E7721303A6A1B1C21705F8B6AC6C253E91AB7E9D6DB35A2FE796037
704F65A2DF7F72CB24EF6F91318405557FCFD51E5C3F4E0A5AA681DE70920B95
2D1CBC5E40D2852E8CDE974E034EBA3BA5FD83B373964FF6314E7CD20BA429C6
D309D1935D4B12270221C594782FEFA82C0E9C8FABA0AA752659C90B868C8B34
60FD3FD20D97D6144592AD70FFB73E0CEC3147ACCB854A74DEB5C6463186759A
D610DC5BFFA477D2AAF14D7C62B15DC032B67AC59BC28CE1D63504D171434A37
484EF6D28A1B792F426BDBFBB3F037498543BE52EABAE0BFFAA06F4E257FE815
3ABA60D8E1B17473F6F8429B98AF55D76EA013012EA07E8CAEB333131540B35E
686E35792EF0CB3A9EA7C866F22045C6C6577EA6EB418D2BAF1C80D8BFDAFF75
8C9E8706E8C94249AC1B7C75ED7CA325F98155AD174D38A30649225FB10538F5
EB74033ACFE7CCBD477AE8076FF63EB0CAF4731826665A73D5F27FA742EC9704
09266674CA23110FB41F89E0CFE75FA673FCD2197AB058F9C26C5EB1CC59CAE2
AF3DD20EB3EA3AED7A01EA4CB3EAA0642B90A7667FB7C484ACAE902CE9F35C59
4C19DFF6C2AE8698A561F1E0847C93F0283FBAA5D77705218DDD134AAD7C32A7
72D4D94DA0EAD1D8B9E34771C22AD65A7BBC2FBE80E77EEDF0346ED0B8814EA6
FDAE15BEF288208BA01EB2D2192FBDE6EB1E08F32EB181BECE6EB1AE24186EBB
B899F1F429BFD65B0AAFC824A963C5F13AC2DFEFFE2AF8FE3919CB75C2FDB7E8
10D7C7DD6EE11D4A18ABC3AE6BF13A9650ACE8CA49A14C36405C4389DC543A0B
C2E94489E6D6A894E67A43EF4F6E51B23E244C0E7A0CE56429C85E413C6B8893
93D35EC332CCEA3A270371BFFC548E3309889DFA4E2CCF936159375345E28F46
D77A2E3C5970FF60F5A8EA624E3A21B6E541C0AB502666821D6CAB6C9A6EB81E
A2C65833EFB2056403DDED2931BBEC53FE08EE1BA1FC368E23A52C0B89FD7A1E
E7EE29DFAD6620D3B60F1A0B0AACA773404681E9BD06D9A9A538C0CCFAEE2574
670E9A0F290269D5F9D08DA856287492A544BE082922682DD82B7D3D622DDFA1
6383B86DB9608737DE5042A594AF6889EB98763C5EDD81937CCD8C45F5DF610D
BA35BE10A0BC295EB74E9F7E7E936BB2247FC589CD961846200F721E542778ED
CE54F066FE5430AFD7B338B87ED3B51EDB7BFC22A20735215298FAE2521B172F
83B882749122830E48034E6C99B0126C600DC46BC745FCAA55CC57CC459FEA70
EED10670C3B3C3A5897BEC94D261F4869FB8C8225AD81CFC6544C589AC24D084
55E7AC212C6C27DD67BE76CDD6A0C46585963E446F1E2B64748C3687ADD195D6
6F5C0F77BE915DBFA08C1BC61819BB4C610BA5A8DD1D01E91D591351F4FA929F
7853CC869AF4FF20418BC1ABE8064B1083D5BFC792E4F3114C3504A34F802D8A
53F4659EA91897B79C094A7392BE1D83AD0B19ACD6DFCAE3386FB9AD0ED4878A
2BEDCD1E487098E6776000CC96244B844A930B00274AF940A81C81C6DB31FD1A
1CBF0E6D973AC1233D8ED52BD40DCC1B4057A427DCA3E605DF7CED5F76B62D09
F4573BF095F54B712FC4F0E56B9DA373EB857ABA2FDCBCFCF91E29B4BE6DAF8C
597F2B947CE1A8FCBD82BD801C5BD39094FA2DF1A480E17540C43BD5659AFA4A
92C8F8C9127B4F14E0FB6FAB9A697ED2293B0831627CF5D253E113EA47597F24
384837B8D1A634C64930847A8402514C6EB49F34D7B3D456DD85FBEA13780B68
EB5FC00032A60FF66DA1B504E5094345956B3565ABB10AA46C63E7C5D1775B79
C36A4F895D79DC5CF01A2112A0FB40425A457924737094766B00DBFA485F5030
5B90E2FC2049E3E54983BF35091DF7720004189F51B916562176E8221B76E0B1
57EC2FAF16B97E8300B2E9C5036C50AB15F00A934C4EE9DA0B1346E5AD31C99D
07E610F83C7CC5D3AE457B2D2B9792969F000F2FF1E1E449B581274FBA782C50
701A4EA7059AB3CBFF5AE97CE903749A4A9060AB90BC83880883F78C46145E95
EA619E7D42D1D5915848986F239CD6990EA4981C77A13DC39369354A3902858E
328FA4CB56812426652D6974BE10AFDA0EFAE8731CA4B1F2C8EE2AE3AF62C774
897DA505ACFD12C02758128A56B4056257A635ABA0E1CD5FF9B0AB9DA29D0BFC
39E6EA3B95DE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748071
6B28CA5465E87196191BE975E7C827B443B92E15342609FB93598571C63AE16F
CB7CCF15B8921F38FDB6F24403EBD6D6BB66AB49962AD578E93B235E6180B4FD
4920794B3F976477A04AD21728815D3185C74C8A1DF224DD3EE5110C18BF691A
987AEFB1DA55E4EF631C48E3B2431BF959A66D710C206B8AE5E988B7929BEFDB
CAA93FCD07341EAB622A755FF5608562153DD6A09E462ADBE677E6F550F93921
299E8A99B0B72E990A1D84831236FB6E9D0A187FD36BFA9D85C9CB0414FA7B15
EC02E8C08C8A4F71226A952C5164E68A44344BC4E6810FAD9BFD3532A9A515AC
5D6B5F8B5A1402C2C4DC011B043066ED02AF0030ED0D0769FFA19112C97076BF
F950438DC37B172FADA65DBF0C00EBA9A358B189F80CAB3A55341E4AB7C1A7BE
4066E1E941A608D1ABEE882F8B8E7E3B735838A7FE08025B5CA3639451BFACB4
AC69B3D95585EF78B1D0F72CE3FE6E475E5D061105933646FF7EA81B5026C7E1
EF4FDDFF62E82B16CBE3D401AAFA438728BB0FDE9646FB43EC0BB1B1B13D8AD0
FB57C47730284B10206538F39266CAFFDF5AAF91F50D9A6BA11AB1CA63733222
7862E5A9B3E0803A0D5BF68BBB1CB17E81309C2D0D216810EF913F89FE8C0753
FA7B1E1DC8DE5ECA1CD63426A8E4E7CB38AFC5182F5316CF7740897FD5C21A61
5694450C2484D2F898117E8B247BF551BD9FC251BBACF9B45022C21221EC817D
05A4BD642DFAD8B91BF0B9EDAC698863266926B6BD5FB44A9944E0FFB427150C
0469452B95AEF2475B0E1A0B555FC30C8CC2D1D61D0ACBD5FDAD7D26AD13D09A
60C145323F6A64FD817953614354E1D423DC81FF5C819EAE2E32F3C52E50821B
A233B7D90D3BC349B97C63BBF2BB2E9BC14F2B0A1D2C5353AD1C60CC7372F555
2D8020421EDE0D7F672F7547E91060A487D01AA8103D30681A0E7A6DF9FE19EF
E2EE57CAD42E03E0D2340B86087B3EBD6674B9BED9CDDDA50B97F0209540B9A9
963C349505B91A273A6CB72E0D6BFE28E829C16BC4FE435F988DF58ABBC243DC
39556956393E852B341AECE95FE3C98FFE6CAECC918437877FA64FEC9D371DC5
A10DD5F4FBD3184047F8F52B0787EB4B70BD0770EA7B61DABB252EF91EE58963
B8AC0BDA1089A4E1DB6B3018482C3080F2FA96F48DBDCB101F6DDC4D284F083B
08C8A60104E92F693F9BC92E29737AA107BFFB3765A48A68964E3B747197B0FE
3A2FED197C64A501AD9E837C6B8E6B5246671CC90CCE237B59B45BF785C207CC
48EC8B8DE42244281CEE05B70BA56C3E20144DE7ABF250363EFCE717B4F5AAC2
8F0F5362EFE6A4271F2B6B4F7AC9FC557CD847E23283C24D720A0FB2C87DA101
0FA78E9A6C9E2E5C3F61884685772D101AE7EAF6BA5E9A1ADE21B4F1C40AD8A8
4909673CF5861F958140A31C8E8917129D83AFC7D3FD0FB3539059CD72E781A8
9AE80292761634CA6D0BCC805B4C92EEC7E0A313D120DA29685EF92226D99209
F0441D8CB98D821CD83161A37BF009A102493614497BEC55AA1FFFE0CBB4AEF6
F9A229C1DD29C4FF95A8A3D9C790FFE2CF83365933977E2D06DE4EF3F4643027
D3F843571C36218DCBD07E24510601709FDFCB5811035C89696E76C7F791504C
41FC547D63A56DE3503363BC0019A2B5A051AF8168E55F739EB7015CDD4A3A5D
88DDCCB76C4C2D3778A41E7A46E42106B4FB54D0E21DA04BDD2B1A332703DCEE
1D356C4FCBBF77F01BCAE075F725E7D990D0ADD3B35CDD9B6D922D888F94F530
65A41703B0E9741C8608E288126D8B2F9368C0F2EE2D3AE131D97345B9AF3FEB
0A6F51A040C27EDE034DA88821DDEEDAF31918281A15A6CAADCE2794E3C5E3BB
5A5571186D2A38B674A8E21C331E579CA5B896BE83B0948E535D97D88C3C31D6
D7D68C6BD1E27CDB73E32187065C2170AAF73C9C5BBED3D86D527099737795F7
78B2F2A59CBF1529A12252FD149970F52B4D5A11C2F066E7C2396CA135BC234D
A09607E092C2F1D23C4E3329A2455F888E517EB0F67F063128DAEE7046CFA4F4
03B9783CD466759F2D4C398195BEE0DBCC60445ADAEA4BFCA0D2101239B22EBD
5D4BCCC51042C1F9A95BC549BF6BACCAFA728C32BE9F381A0D98BC2BCDAA9870
3F4515C52A5093BAE5EA61B96420F6F94F6B1E310F4FEDD7C4C71C917C518D7A
4F62D4D147F967AD746EE85C3BDCFA46832C99020EFAD34675B530A416D23DEB
773881D50BF51F2EF34CB90BDF2F363798A41ADAFBA4D47EE36979B70F3E7797
FB7A3EA1F9C006E28255A16205D7D168368572F5E10C3AB5FA1601FBBD685E8F
188C2FBBD37CF83130E44AF5342B8E5971250D234F77CE58A6ECBE5FC5FDCBF8
248827F4D74AFEE669AA480D26E13E51CFE7220CA344C2F396B9FD5D62A286B0
597B1B82647863F1A6DE12C1695D2DE066AAC196F352BC77BFB59154D41A417B
32A203F15B94D3E218D94DA114958E04DF0E1CD9BB66F95EBF7E6F9A6C8ED8E9
31B9D25580F65097E32868E3A82637AEBD02B36687AA3AFFF9C6B6DA1DD0B1D3
243AC2C29A1BC5911A638027813A1038E7C1AD8E6904DCC6AC7312142611CAF5
E5AB09B214D88A40B908D81EB19C8BA100722FEF4A7EBD90CB331DC083086871
1F300462EE2D41E67FAB53A830B8CF4A6F390111451C9CEC7DFAF373100F63EE
B4ED3A632EB24FA1D614D83D86CBDF49A737B50969DAAEDD782E6DE4BEE40049
19FDF5C85AA62C59729E3D9AAF8522B44007A7202B4650CBDAEC771F53768405
63971474A0EE504F7C19859CA8BAD3EB4D2BF07E4664850E1686B83937E7B9BE
7D7BDBC9639CBC7F33AD414CE0C0D9896F2B0AB335FA83D62151826B69BD8E42
0B2230BDC1EE0DE508103A180F25DBCECD97190452C2D292A3C1E01CA717853C
6A2E28D6C236195F9675725C0ACFB4F9402783E5CF5B0D3AA4E7B9815A8C2FC2
06584B1E6DF7E244F1308DF7887C50FBB41F8541F9B4443ABD668E9A67A932DB
EBC18191B321DDBD7379DEB6A5D8F845C3CA5C9C45DC71BF0F630F13A8F04939
7DE94D1340865BE7003535886C615724DB11DF776A48D065B3DECBFB990A38B4
B2DA61120224E13F2997F8E970FAE3F071FDA62055C11ED0047D8CC7AA3E2F88
D4832066571082BBBFC85245558D7861CA2D4D7462B1021853E11EF27E03BC77
0787FF90B8740D266463E9ED5DBB469256A9E5E8E9C938BD055F0954418C28F5
3C2CC7D0D2D4DF650D50AE7C5D1B470CF3B6F3D1034D66D30490D696F5E95FE5
49D49D9DC1FC2F99554B0DE9F84F9B8A09F30EB331394A719CF0E6AAD25B0D61
6BE8FC6DAE7F9E4D941148FAE1BC4528A5A22EDCD29537E686D75EBE1408CC62
E1FE7257F89D133B06927684DCDFBBABE4B5EBF8124E2FDB0FDBD31EF714CD97
34F43776281E369F8EC97471E7462564C59528113732949266A47CEAA14ED5A2
F52B68F6538B9D93A5AC2B67CFFFDFA21C043EC357CC82C9A0A7CED64159A1DC
D18E20EC4D6EC4321B42A85EFA83AAEAEBB8A634351E3931A471BD66BB8CBC71
592172D55ED614527270F17C76E97BFC550AE9F6DC13A61F729E773BCCE279B3
53E775D997D4204B8A86E20E69C45B613475C4D0629C3BD9B67C43952C810E5A
069E50E4B57F0B9C4BC61BAF39FDAB3F020081E8EC5E81BE631C096A8FACB714
44BA53D5DF245CC2B69D44D293FCD78A8640B8F0F3B8EF64502CAC9D3E113B71
09937F7DD57398F84F41DB349D247FDA9BA309B7160CA575478A1831FE701625
AC202E3C0E4C4BC93A7F8FB4258E5164A5B6F2F0A67670649394C0EFFD19109F
D14092AC28E54958122A7A98FEE53996C0A27AC77B1016D74FD1A051E217B055
A42E429F3BCADC47BDCBB419ADCBE40EEEA273D7ED34D9ED0EC0B9DB6F055D3F
25E921054C8D544CB7DFBD7E6897814F0261D35B43928A9B97103F4B51802A8E
9AAA0D1421B4BF72FCD38ED9844B26C39DE9AA56CB348AB146B657A6A50296B6
7968D4B2CDF5787E8A636D02AE44DC28A642A4CD8CED891A5611A68FCAF1D258
6954D871C168263D74E69BEC1B563E4C71864487359E82FBE3C4107A7CD0E95C
CDC724FBF729A5D79E573872CA87B0D1B68F82DD8861F7008D6487AF036E7C08
F5376DE39DE2F6AECC58C24307A2B02AC61CA74555AF59E82832F7D96993C833
E182B8EA3BAC7A453D8BAE0CDA4193F46BCAA47D4DF5350FF997554E28A6C4DB
F72375D08C4546E2901D602CADF3C301A66F3A52D87AAA37A0EAB051CA84B464
D03D57CAC130E39E31B4C1336D7ED619AFAED837AC65F020EB6389065D07100B
F817F8C3E66470B0112F046A91E2F85E7A894F894584B9F3959753993C029CC3
29FE1DED9663142A6A50E7DF9DECDB0BE5D6D91024DD6F3B857346D8ABDD53A2
6459FC6E6E263FF589EBFA21800C08359753223DEBD066F5CD5919C711D6DBEC
6CAA607BF3B3A9DB93126C64AF39F7FEF194A2DF95B3F36B04CDBDE0FC0C45F6
8E1AD8027C1964802F0FC84971324CDE368693DFF6799209DEFF7BDE734F9E79
BA04172639211E55FA7697CAB39096565ED23BD2536F2B65BC4E85EA2067E0B0
3C6048A96E3FFC8172F11024331420C76F08EE390D77B02EF799E47F99155889
A1A5232815091F85BC6824BD46D222FA35ACF82B21F76CD5F5F723C87A3389BF
08FC9E2CFA7E877AFAD12AB259A65A681A315CCEF42893C30EDF9B4A71D654B2
47BD7D317185A1BEA532F8D11B2C841A85126BCC7E1E34E3DB0B46E2711B1A35
55E103C5EEC9D5295D3C2E6C1F03BE69754758FF2942BE858719A561B2C1FCE5
FEC55E606F79CFB4525D5E8D7A3199EC73E9A4017769D9A384D575A9D7081A0D
47080C1212E51FB68CBA8B4EB404E22199BDB3B7F5B2097B961F78376D99FFE6
CC0851F70D4F046FE3141CDC96422F7514035094BDB2B0E791566FA140C404CF
E2DA08C2CE3AEC9F7E8CA762311EEAFB45BA60BDCA14247B9C91ED57EFCA3269
1C3DAD4B1D8FB33F00D8B8D979F0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: SFRB1000
%!FontType1-1.0: SFRB1000 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrb1000, tcrb1000, larb1000, lbrb1000, lcrb1000, rxrb1000.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman Bold) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFRB1000 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-204 -316 1538 931}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA1B1ED6A435C02C357D527BF5BAE9F3163F8850F
4267F16F7320BCE14CB1FE323A58C509FE3009137D98EE3E27DDC8E516C9F9BB
F0F7C6433B68BB7E079176E27A2A4ADA4924658CEA76753BF1FBB58A45B6F1DB
A7C341CB3173EC5478A4D7A9EDF385DE271ACDA615A02C507D861C0654A8C858
EAC491C7C3D5D958F5D3474BFFF5633CA51E90F75ADE783E86CCE77B97BC25E7
9B1563F78605D01ACFF6E59475E5C1D9A9E830DDDDB4A42ED891FCEF527A9C6A
4EF63077B475DEC25AB0D916C2C902C5F3936BA5AE0208F08085FCB1CD4E4B67
A5F9C6A189E9F1365152ADC2A5B18E6DB63021BE2DC820865183947964920AC1
7FCEB8A8B428B53B1D0F6EF25C5F69832E075783E3EF3E67F9EB6FE9C98795E6
600DE674731975657D64C1A4FD0AFFB42495B2C151767E22371ADB22CDFDCD43
E0653665986BE4E1D3E4616B99315DBB387424692210B2F876DF0721C1039E75
89DE14E86E27FA79786CF45AEAE74EACB3F40EF238A544747A84FFDF93299AB6
C090ABB7A0DB9DA5091AAF9E9639C43D467529CF10165F9749687781BC525E4A
9D57EF5C88A1433C4CFB44728CF8792CEC9F5D2CEE5747A60788AC29547645DA
D92805C4AEB1D206E08F32ED0AA918FB62EF6703DC988209FD1C6866A02240FA
DAB44CE04310E6E373A1EB1EE9F1DBEF29ED75B4C8EA63F99490B2A946D4EBD6
E45EAA036A2FE3C55EA3E271292E183599671C1DFDFA1B9A9682F94A6CDF82F7
91C9FAD3E25E0024039B0E85CFE2B68409A690ECD2D206F4785F4D73CA3186CA
19D091C82076DB623492FA39A47F114698189032044EC1D0AE279764E2DEF1F1
07BFF48740DD307ABA9244701F1BDC1BB7051597E69577920F918589B0621BD6
B6862D3466077F99FDF5DB23D1D2C1BE0158FC2E46EDF9105B59DF07286951BB
D5F3D71DD0D3CD747871FABE9D03C24B82786354F0682F5D9ADDB28F8C704DFA
727A05F9F6C5A3DF60A2592F0134AC66084A2F7DB9CD4E44511E846A85AB3351
81D61A8AF078B1EEE7877162A3EB5CA4A58044E7D341006912D78BFFFDBB4355
06CB05E7D8D9A2743723B6EADA2927E7264A54EDC09E4DB5D680D8E0D7022A7E
EB0C63A4098C048BFE9E997E495E20B1DCAE817DA08FFFD01E304D7F29AB8A60
6F1D0E3B4A5926F7E5D0A75D2E6A3584D88623496B7BD2F9A0BD7007EB2B7670
BDBDE64AA452D96A71D7B4BACEC042332E4F5CDCC0E697CF597D765120A47F5B
38629013E68A54521CC86365227BAB07506E985E70D72F72DE4342D314A2C156
A16024AFC6EFC216CFE942DF86CD620EF9A698E229831243746CED2E5E53B571
3CE7131ECF348A010B0604C6CB6693C98DD824CE5704C80D1E9124173A1D4F42
EFD03DE9C29537C96342C7BA899AAAD4EC637FDE9E5617ADC7F6DC792942B5F8
1121393F6D70E4E7971D8B360D15EE06B139
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: EURB10
%!PS-AdobeFont-1.0: EURB10 003.003
%%Title: EURB10
%Version: 003.003
%%CreationDate: Mon Jun 13 12:00:00 2011
%%Creator: American Mathematical Society
%Copyright: Copyright (c) 1997, 2009, 2011 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name EURB10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
%%VMusage: 120000 150000
11 dict begin
/FontInfo 15 dict dup begin
/version (003.003) readonly def
/Notice (Copyright \050c\051 1997, 2009, 2011 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name EURB10.) readonly def
/FullName (EURB10) readonly def
/FamilyName (Euler) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Bold) readonly def
end readonly def
/FontName /EURB10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 12 /beta put
dup 13 /gamma put
dup 14 /delta put
dup 16 /zeta put
dup 17 /eta put
dup 19 /iota put
dup 20 /kappa put
dup 21 /lambda put
dup 22 /mu put
dup 24 /xi put
dup 25 /pi put
dup 26 /rho put
dup 27 /sigma put
dup 34 /epsilon put
dup 35 /theta1 put
dup 111 /o put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-30 -247 1178 723} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB0A7F85C4
916CEBA5F482DCA185F22C27110E1E31490ED548A35521A758ADD39454B51734
43068A1AA37B5402FA733039FD075F804D4C278533B420F9A09639AC61D1740C
274C504DAE5DF0ADC745C29DECA912DBF69E5E54F0CAD01B0D62E8CBCE6DB401
AFA53851E67D2D84E76974D76DAC20FF2CCA46ADE9ABBED1A15C084F0AE4330E
B86B50B724528E3DEC0D65E01434B44F1BE1A80A6109E90239FAC2076E2277FE
59053B1A32901020216897D1393377C024FD41EFE72C6E9DF4DA32F1E2D8B8FE
97A50E7E1619AD3158BC7A93F9A0FC34E5247267954EFEE364B32EE3B55EE34A
994F36CF573D290973DE6A4D1C12D6717A4C97AE30C712D74702FC67A344BA8B
74ABE0B650471496C1126738649D245369A27D6F98DDDBDECEFAD4DA594E58CD
1B2A932170405BD564157FC4ABC4DA212FB74A2014ADF4EB331E08894337762A
09063F01E03645363E24C61882E76F5EE901D7B0653C04AA8C5B426E86886F28
91F669934D55E8C55F4829D0880ABE4C3612CBDA41CB4E92E322329B700076EE
19A810386FBB8F9A7AF98F692203747AAB615195D42E50A145EAFB8D736E56C1
1DDFC744ABE36625FC7212F22AE7C19AD26A7CFD5BD2FEA0FD11FFBAB8AB402C
696F04C1BE4378B3C2281121A289EA56B9C9EFDAD1267B54D4B276E553B3ADE8
A3E51707AD3AD5F6D34D6C6B2C85317B630910E202EDF88156510D0ECF906FCD
ADAD4B61A3F03904B0FCE6E13551816640109A9331A6A38D77D8D35EDAFBBF20
4CCC6C9EDB1FDE4687D83BDA69B7326478152D4EEB276140A9F8390E92B341CE
498F0F7AEFFE8BE1F14DC5FA41F5F16F7DB6E29F986EDE16DD23068E3FB615FE
F52D2A5A66EBA8A43068D76BA8E2FA4FADCDD15543F976D6EA2728F1323E62A9
FD9C77881DBF05E3BB3CD7C5599FB9F9D3AED57EDB4D25D37A99A22BF278B9BC
B08387773FC5C3E21D5EEEC184A3C6A182563FA87DB8AB50E0258A061C2548CB
9A9D72170B2BAFA901763094786A8B030692EBBFA830050818FA5CC7B9DE515B
27D48540FA56F817D5C135FC9B3A7C754FE99DED43C5EF485B63C90BB1162AF6
02DA2D5D4F3A3302ECCC748FEA04E3BB9F48BBFC50B8E51C8C9BB9223FCBAF3B
9FD60B1E9A900251E1234EC1D78C5E8760FA7395D366DC4C530CC1D10D18F3D2
433B056FDD264781DF3860168998355FE9BA15262D61D79470F252D22FBFF4C7
DB0B1A914895B24F5009E97395713E5C66F42696C47DE4B9D9A4814C76879011
B5307E423F396238308379E1F69BC416AF6DCA16F0B5384C2DFD43D4BE6F00D6
978A702BD2A180D55B9A27FB06EFC3D6212E167A89192A605A34F502562518B7
A07B4F2C0043C394C7F1DF32D034AF7007ADB4F505B1E3D4F44D628410910FB1
9CB8C77E774B8CC72AC10B638220182F412BD74046A0D0F9321E7CBB6CAE2EB4
5644E610A3C02D8BAEE48BB4D76997F50B5C99E15A57615034AC198B9CE395A1
9F62D74F670B5DCAAD17FCCF0A12EE7D9ACEA54BE8F7F6A5519A25F46C877723
C22077373967A42F41256A3F4BAEC75428E2906BD706055C35116BFA7F1BA71E
0A8191C36AA7CFF10D65EEAC96F9EF842CEDD8A398E73C47822ADAA04BC37FF7
F1B98B5270169C70E6E69A866EEA325ABD14199E0CC5FEA161CE9DB99C157782
81D46586D15B5E10A151979D98210A9FB847130660309E4AC4CAC62CDC08B14A
55BDC66AFBAD6F07D4DB0BC8E25916423B0B347967E7AC60F66716459A5B1006
04F09A2C7490857D6FDA022B7B1A869B03A966601741DD659A458AC0584E63E3
30BB29B09F9EE9363FA44ED4044AE8293E7717085F52BA25ECA7EFA358C19169
97FC3AEA084968EAB1D6BE3208D86E4BFC463CA6E2A3A205B63FE262F6FF9503
FD76DA70F302B08E0D3010EA65A6CA9E93B0C9B1061B44892ACA22C462511670
E005B72598E5D4B34660087A0A25F99A42C73DBD72A7B4640D2FFBFB4783B5D1
E8F39611C198C7555BFCD6FEFBF0190EB9415B36F2322562B98795600E49B0F3
6CBB7D9C7AA273DC0A01DECABA68F6D5AB5D8F0C76E0E5CE990FDAB5A1BEAA32
097DDDAD2F4F9E4DBA308AD42BD894EFA529242FCFA967046476ADED15087D79
13070B1DA9B41546CF4235BACF14701FF7FE572683019718D169CB7BF627D2D4
5DE672B4AB400585E7AEB27F520DA1AB112280B9E12297B4D4FF8374D69248F1
F84FF4382B686A04C5C2054DC8D55B85883F2FAF07B1323C663E08B7676D5B6E
57D8AA580D511675578FC26EEA75F18D75A9273CCFCB67289412748B7771D132
5A11483E86BC405A7187CBE8A7A96B6EDCD00254A00699E53E8CEB32C2AD8F80
B2D48DD821D913EE8C58E25A36BE60832FDC67F065A5BB69BDD50725689E6CD3
9F8E530A0C940984A5DDBDE48AEA5B3137EF86E1F375FDC30B6A06B04BE9E821
77BD81650F367247ECCB146819DCA3D5502CB68810FB856759574DD70E0C5D2A
0F79E9A8551BCBEDA9C3D8E4A4575AE89B8B21BB0CFD68A8232B6D002C5691CF
CBE3E3B65EEF4FB8CC9A6C029EE538E54199C283B3B45544601363D1D537DF02
B3CDA24BE5B94FB1AFAC087A1BCFD626CA8B42BCF4D35105D716138011CF2754
D758D2313788C4E64C1BCC590ED560D354FE9ED98B6703DED3BA2A8DBE2B04D2
C760547D0167ADC19093EC9EC49E4B6EF7EAA4A8F5F763F45AE177F1CA295871
790D0318AEDAF71C6B9E775BC35B888A6A1916B424B47D62B4909B77048B280C
E7C9B5757E1D59664B332636E6220EEF7B22E40CB5546058FB828FE55B5D0695
77418F95684B57847C761D3AA26AD79BA5773D107663156F0264549C2F401D26
F33F54E1E64F2FEB57E717A9B54245A7FB0474C4B35C8CB1498EBB9CA680A624
613CF22032E017D859EC753D5675D207CC7F7227A2C33948DBBA0AE68B46D4F9
8576BB9746000CEEB8ED7FED08190452411D5CCAD4ED65C38E19DDC2760F27BA
32C63EA0236A7DCB89190BC8EB5F6F63931D71FF622A4D56A3DA3107A51D9BB6
55129FBFA2B09A5A64DCED5EF3880AA2485171C75F4395F7B1EB75AA7B82DDEC
23CEA840FF300A50A2D6300CDDE55E49A815619A4F6907649FE99E8CD42262AD
A79D5FBA5965F95C9A5095DBCA6CCC4A530BB35D229EA914A2E4FC92034CEFD2
CCEF74ACEA4FCFE7133D92CE868671D1D74CC35598E0E0DC6691A91D8A7FEE01
DFE1427EEA2C5415F5C420B7B4B25C1D4B63777C034C0981A02C5AF9E9F8C0A1
36EBD0F6D73EACBE195FBD12B3CD2D6A9B34BE60E1879461EB3674651178696F
D2ACDA1AD29525C2CF2D4E331645C3C4F7A4DA84330B9E3451EBD233B8A76AEF
2A67A97D016F1DA3ACC8E5DE99B2DD084F5B5F5E2F557732F1469F2A2A16D7B6
FBFF1AEE078507DF6A6DBBFEC3DBF522EA1D276E16D95ACEA011DB4835E59676
571FD2760D62C96BFC61F255ADDE7E57A1B45730AA89B58118CAF39B1801EA85
E5B42457D3E0FFD2E5F65063C48DEE4A62C827F6A3E0E182BC437DEE0622A226
11E6903FBF8105BD4CC4596ACF7D57BEB0D0619C4E060628C045B2F6BCBDDCE7
C9AC9BB5ADEB3C19EFA7BBB3D5213FE74F4B51DAD3C9FEA2C99B79A37DC5E459
1231BE6393730E0782D48E1DA04E781DADB245C4F812EB9DB3831837F052F31C
57773B13ED5D97E1C0EFEF00259746E1262639D1C370C26CDF55CDE6280E3C79
42D6045A8A1BDE602440B6453FEBE9B35AE367E55E116D35ACF6F90CFDEF30A5
629D4D78AFF0CBD4FB3CBACD6A53795760E1928DED8EC8BAD5C96DD0ACDA0CF0
A49772E0E652DC61F1F4745EB480CFEF5AF073016E376986EAF1C684EB77A865
40AF974B67FC121B35405FCB52ACD81FA8D800F1A68DA1EA5D80D8CC162099E7
01EFDB7913D092FF6361ED049B68153A2530BA1A458E5E022D29E77B2908D045
A3CE3BA74A5409A4257FE4963025BD80AE01F57C6223699917A5BCBA6AE954A5
4BCBDBCF4FAC256ED1AAAD6A534354B486CC978D78BBD4E8458C02F929188E57
712BBF04998DA0CD39BF4A36FACE93BA8F62F427E22E06627EC7086FDE07FA3C
31DE824D0C551B4E90BBB0418A0E4E57B13B7F981ED85916C349E0A9584BB11C
537B5B9A87EDA584196954F82DBB3E403AB7418F4F7B2BD072DCF6EEC4A399CA
A9FE4BDD9CC3047685B6EACE71CC37A617472AE465C3D39ADCB0821D8CE16C01
BBAE3FD6B60E0EE94C5C5FD476BEF85EB97A3E9DD805625047C8CC7E31833CB6
C4430698E6D2173A04C887C699C2E3E574BBE2440945721E41F942FEBDD7DD0F
ADDE6BE186036421423FB7E6347D62BD4C21A59DE15AAF7E444FFDBC2975A811
DC92225E21DE8207FB8714E18C5A847D844B363A52BA8C7A3B256F0071A556B0
06A70FDB326A0F452B34D2BEE3D5CFFD8A4B226F78B2BA0A943A060D81476110
57469AAF35CE96FF35B3EB953D732AA3BEDA01A6032D8A87BCDB6486F69A05C6
53F14878C12260309B0CB0CD7604188BDFDA900480BDE83B81B056A6D1D35E54
3D5AA18301117E9FAA1ED9260D4D68AE3C7687B528DD69A2553F7B348BD3DFF8
AD2F83DA456313E058C599587734296CD657EA0000667073ADC083D74CA5A648
DE4C810928DE68E5795CE9270EA7D402F8371CA7CBAC6EE76FB1546D9A0A1E08
9055E176790E8EBE1236BAC3E70062A41955E5E3083F5015437805A3986F12FC
5F919368F07D4D8C2DDC0CB4DA10F32E05428C3E3AE2E51FAAA8FB6FF7EEC036
785EB99674569210EB8C4212CE7E008BFB1593F3552FC4318230BA9592D3B045
C9A06CB437FF24FC6A91CA6F7B04F318D369566643F3A005B010F2ECBA8182FB
2027BD388047AB2BCD328D05C08EA5B3341AEFF2FE8706550F84E964AAB0E505
ACB0003BFDFE1CCFC677826212E85CF7332B6D690A366557F74BC6CB0282E54C
7FDCC2121B234F842D0DF0C400F4074ECFE8B485D3642C42AB6625EEB027DC00
49AF85892441FAA57148E24C0EA47B50CD9F9D5F3DD1929BA1EA16DDBD6DFDA4
407127EA87AAB8C46EA3669E82E0E9B47A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-Bold
%!PS-AdobeFont-1.0: NimbusSanL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -155 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-173 -307 1003 949} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8D62A63193C4AE94C086C1
552833DDD8F116B5DF33205AE709B3AA63DA7BEBB165B67281827B48FB5EDBED
02A1A5C0784FC57D3487DAA59520BADA1BE3FB9795669924321CE4F466CD8E3F
7E8EC2494AEE80E2DD7A48A6861AF5B9F0CCAA4A2FE2B03498EACACD6B9C39C6
A8F2E39E06BBB061CF2EC380A32EFAD0B790974BB5CC3DAF0992471456967362
77DE34813F27ABE99302F86BB4D293A37F84667E7F3DFEE4CFE9D1A676A5728C
AEB5222FF50DA97E74B2CDEBF725FBCA7015A188891C8A376B9DD8A642C4B184
B1BBF3F376A6D6E31EF1C8354DDF8039CB20FAABCB34D4749B3C8C8D6972CEB1
06B8A5AAE3AE40A91F1F2B1155681A9CC933F87528C99A2B0268B43A3E829E7F
3BD863CB52950773BD9B0731DC4992541D7DE7A055CA65DDD2317F1705C20D1F
93291BCC254CBABA425C032B3B15050D41DA14FFE1B3D684EEA428095A01E931
98D4F849B239AD9D79F4502F0271AFFB0C297F2F347BFB9C137782646F648F77
0076B85F5A929FCDEA2703333F6918B8F125627F8B505C688E30F258DED1AECF
2C86EDCD88C29249A8081731737195FAB7ADBB54743BD66511194DEE2516959B
A20701E2D97342248297425491F6C9471EC9A98E630D734DAC19721F0B324432
C8D7A0B751453F89F7008BA37BC48E0831EE3ECBD8A0A292D63CFC890B28F695
9E29AC3B4DDB78A6883B9272CE34A012A82ADEC0B6B641E3940A438A098CCFBF
C50544B94FACFD9D7AE09AD0632015F81D2F77FC6D80A42EC11D67D8A91C376C
13C8E3444CDFDE4D2A1ED021410F4D6A4E97804AE949BD913094D23108C9D384
56F11025E2D24939114B6BCF579A0315C52F3CA1BCC2860FC1A0B9FB8A37AE2F
C20C0FD44D215FC2AF737FD0339B070D54E664021240071C665DE4170DFA182D
4E385685FB41A2D85888B1149E9A766CB4F309B4E2BAA28CF1F8CC14BBA4EEBA
D090480605FF377C5DEEC9C63B4FCE2D86964B7D76721E219CFE2F356E35FE1E
6AE1F11BD1DF3797B4585D9C731EB49F2F25F36F68E76676A0D66DBD90413B7D
3BB63FB1C3717A3F1E879C909DFEDA3366AC599492BAFE2AFD3D6C9E852E4F1C
4F6B34BC47F3A3227AED9C56F51E57ACCCE7AB5C40888A19129D9B7414FB9518
E318B8C06D638E02FA63A5508EC4D6FAFD0EACDD8433869A00CF375B55B8906C
9A0AC65A157FFCA9F2D5BFD0073C9671F7F951F199375EDFB3ED5A0DA71350E6
329E4F082C00FBD73BC06D8FC770FD350CB7A63316DFB790028544CCDCEF246B
82B4075D21CF191A2A9F42EE8C9E9A2200C8EE61182A563B02CAB57B9DC5BF98
B15B08D0B6E2FD051D5EFF7E4CBD5557261D99ED0CE8A59E362AD022FB8EE1FC
DDD49F035FB6974936F99BD3FDA14B561E74EE19E726955F25BD3D4181C84D03
DEE36C9F7327962800322D8B66E59BE53EDAB3DA137D59CC6EFA0F579F8A1D16
CFEFB149CB67410C30C1F0203646F53CDDEC1DEA2D6E38C9EE3260EAFD1C1B7E
9CAE9EE810B4C79340E00C708F24FC42859E4D18B40BF75688F3ED383786FC40
B58D828722F0FA75A0F4913D2F5DB4EED1D98A60F2479000AD48A72EFA7FD1AC
7044A40106216ACE182BA89C9BEFCD87DB55AA5E0AD1D2C398A27804EABD19C4
305190E68E3A3DF007B9CF6DCD92C3C31449188EE4186E943F078108D54C6643
5E9183BF2E87AEDCE78D2BDC07CED888B48EC55E3E4AAFE155A4E2BA71CC2543
86F89912BA2FF21AF3E3229B91E0C5B5DF450C203A449576A14F7F780FB46697
AB87CC02D3C2CD09FA0463DB6692EACB0FDC77E8EBBBFC63669A515B3448CA1D
44B3B6A5E00D034264E10FDE97CC6770D79626FCA28E6C84E2FE82CF72A27FA0
51FD2D8834F17B15274840BE448FF0FD95FEE168B4ACA0E15855B6994358C68E
747C0ADCBA63B5091509F6CB3B9B1FB02C9E0C18A6CDDC9C9964844483F0E0C6
017580365599DD3021C36FDEB6BD81EBED69E888FBA1E2544DE0BB152A0901F7
BA0ED97017393DC2A256F557DCBD0CBDDCFA83A5772B568666A2CE8BF08E5BC3
7A6C14DCE265FB34AF4C91CF3F02EA2E6627C292001D28A40628F89D0C92DE64
EDAD0C615805E8E15805315FEDA94DD73B6E7B423B9F34937B2703445943EEBF
D15EACF4EDEB082BB087C4C3C0F4ECFA9007FD8BF48AC4747D6A07A1EE6BEBF7
3C12D7E0B65E32A8EEA690C33C850A8BC6988EC6DFD463346259844571401A13
1E488A004961B9D773E2804AA8A2257269EA48C65BAC2E7660209330540E6FE3
179B50B077DFD0DD1901FB57909918D07EA7650932CC36A7FFB12F2C8EA399F5
B8013486E63805C5AC56B74018CB27405613AF6A77D95DCEF6705C8836641E26
2D7D8EA03697EBD522CEEC5B7CA9E953D804265D49A971F125238DCF9C022D18
B1EA62E051CC31A7777FB3A023587712B8A90B3DFDDD7C9A5CE0300D387FD90F
482F5ED4CCF4AA48D19751EB82CE7429B7E7EF7ABB8826396364381A2A761405
6C3F92F1B7669BE10D36AF06480A6EF23712392B98DEC40B83B16B3597E8AE55
B004BE337BCAEB58D4B2EE599A6F6A9747787AB8FF4203D20F3953C0807B3E84
0E1D1D755B40C834FA1B76A15A766C9C67C95A518A4E514DB0410B1E140095ED
48E258C4D983DD924FF553E5B12C707C05D2FCB119060BEB09B05DB3F8DEE176
DD49221B4CF6C04902CDBB1B7019C6F913E666C27F08AA319A8DC53A2E9F8A88
87927BF002FE6F058A6045910F486EEEF66FF4C145358BEF5A62DAFE88388C1E
D28250EAA5EA9E0BE195BC8C8F196704E4D3B74E0CA32EEEA3BC185F18A3035F
3B493A25DAB00D7A159584868221D7CF0BFEFB8ECB2041759BBC27CBA4B1AC6D
05E25384B0C3A3A15E2BF8BCC5EF2F404B2A029AAF3FCB17EF3E87C6070922DA
496CC4E1A290B2DD4007E278CA4266EEE9C01DFDC91E349208350383E04A1591
3185542DA6218507E8705848382A85282F79E181EFF14733E3B857A5EF933A0F
EA2B8B3BA7C089CCFA75E93D123597254F889C0ADEEF68329D5CAE9EFC75DC15
A9494E876104F89282927DF994271B1F39BB29575F0D72916AF4B383971B7E2A
DA50A6FA842125360BF3DC1144957CE05F9675B16D071E432931CD32FB8C360C
24FBFD400EB596582E58C0C3E1A010DBEF44CB2CC458F45CC832F8709E3D9C36
68A71EA6E3A508B70E113C92688F8ECAFABF6D684FD9084AC279F5EBCA452889
175FC90DDF387EBC88C3F36121DE0957AD1610C7FFED2F5728DDCE3D32785672
5A45128EE8ED5831DC8148133FA98B17B1A97402F2D2276DEF8D320D2C81AA5D
CBD4D3BB9693AFE260F9E5F5A40A3F60A417DED15BF82B159D82DDD6CEC14CBE
E36C02F570707F49D9C02211086C77C3FC8A7DF9B7B598E24EDBAB35338158D9
B8E25AD2B3FF9696023C65A531B948D9B63F7F8979851DDA32FB39E819B0D037
88CF3AE5ABF81EAD4C1AB1588D3554BA1D472C68A43184B2B11E88762D524666
96C5726A542738B81CA12F21505F6F4FDD7F55543F8C919BA06BB84C7B4627AA
7EA898E6889AE14D14267FC316F9570269484241A8D61FAFCCB13A3715BAAEE7
0345F0041A8645606BE9A25E02AA121B2B40BDF5629CAA77EE963A7A7BBCCB0F
C874E908FA01CD86DB9A103622C41791F8E112853F74C475451EBD128D0BDE68
37233AC42E6678C5048808436A6975645A8D0668BD40234C948F1B06A1B8A026
B3CA477D4CC612D0DC8CFFB2D7A52E0210B9848E6FB91C81497FC1AA96D6B481
777A5F35F75835683515AF6CD0E731942B25D5FA8C7B8755E7EF2DC1C3693712
3329824946320837A6F8F483B8DAB677BC1AE4BBD043BA99CF39FDA56C856E0C
8898A4E666860414F5C000CFB1279FEB8FC14062F17E61513691DC7010505C0F
1C9BDDF1747CA2F97093482130E42AF31A2AF987B5EF7FB5D8C75ADA3F1A5D07
ED586302931052608603E1CAF788648D74B078EB95966054B3FC75BDB098EA05
85B9694BC13C00ED0D7BC60EB12A9A4A3B90EE6AD37BE94FAEF50A17C0780FFA
D5FF9E43BB0B5B15A85F38F78AC6BA386FC46AC5F2AEBA302B4822C91332AD35
86109BFFF99A38395A4BEF4CF5F6C355C815E903E57AE0E4F4F0105D5FA93851
6AB9A6BEAB3B23DD9154768BA86963EF76D6CF34EFB8455C231D0F83DA849DC6
5BBE3920E35CF93D4D830D02D1662EB02393424EEC4E7DEDCE6262C643BB6533
215F1AA3DD003FC5DDA7C1280A05B1EFFAACFB0E9ABFDA1218DD625B134B385C
F2430B1B03BF38D3406D2EA3EAD6A65DD6253068ADD0F5EA9F03EB98179BC7EF
CC436BFAEFBAEFE93A3251799F297D2B269F833DD622DFA9064C73BC02BBD656
BCA2F9287470906F602F4C370C2628C44A6422A75109FA64EEB0E9543BFAD518
A2F041B9DCC9C43A4C530DB3EA06EF9672983138D713933F676CB69B432090DF
6D9D25468C1E3BC267E012A63A11F310DF96D7A130D2E088EA36EB514B454CFB
BDDA118FCF6B4310418E6AC0E1C277290F44B6DB4C1B225FD365739459D48AC4
62FE9D0FF69D518A7E31DB2DFD44D80EB7E75EB32B0639DA2A147E34C42927C5
1A7EFB615F75B07248D8E8EF7C983109D292FB2B729B3F1AADECDE38B72B0834
4856D241FED95BAE8CD6EE1B33BBFBAC16F3A921AD5E6545C414346FBDCCF69F
29187B3FDDDE649F4F521C20F6B6AF7E151F7AC33A81947FA7E5A1377596B3FF
181058A150B2010B30D5AC59715F7BB1CEFA691A626184F90AA2B55F987349E9
CCC942792C91C733AEFAD8BBD5D9B2BF18A1E148CE4C2CDD5E165DFA5060E41E
37BE5FE5AE32F4FFCCA13D88B27BD4E6013F4827745F4E2F29C423B6101C2132
87103B7EA777236F4AD9D2D80B43B06F1463D8D1F6F2557B8333A04691FEF301
D97ECD8C534D848E7F09884F24ED4C28CE31BEC8610FC43831FD101E684D754A
0802A5200C4849996452E00664414FC96496F79118CFA0BD6F3615B632568E0E
A67288F7AF12B05B35A9D557EBEA3230AD28974B51299ECD707A6A4F3985E0C5
EC95A63990BCD918F1D99FAEA23582C0CE47DF777C13A8D0B66AA0C3A855C298
B2350EEE78C24BE584C025B53E8E70BC04C87DB113DB857C0A6824BCCA7EBB16
9151F4039E69F162568BD2B879C22829B1A12ABD13D3D8F589C6DE4ED5A8DA7D
9008FCAFEC54490428B5A48080203C1F880DD44EBB22F229191FBD72EC4BB74C
6613C9390DD9599763517DF21DC09778880C3C17400BEB163DB0890AB8EFDAAE
83E7F66AEAAE9552ABA4B9C9DE17AA5505268CA9DFC534257D43B141F1455105
1C9C4DE76416D2CC9F70339848692009AE1A90906682A268C5A519441184543D
D29A93751F16A116677692251F7262AB014D8D37027434E22EC93EA6B983053B
DA2A7CC21BA349EBBC60B708E1DFDA1836B98FFCD4D468335B197D8A1792B270
A46BBB214956CD44B3B19D36FF290BBB99B4F799251FC7DC669DDF8D3CBE57B3
3F73A1B47E070529585FE911624C3C9E79191B74A29D38AA8F05F4A8E0268EEB
8FE1C8655F9A083698569A48CB4193904CD634891157769C8BEA7D15C98753C1
756AD232C5560AB24BA27F1119B9438692C501C7DCD7FFE556AA4837866F3155
53EE7F396692FE50C17BBDC79E24EBA197C783B2B629BC5BDC736F4859397D7D
0CCE1A4F498B5B2135855B503083845E02E4DFE5B5C4530987B080F90997A961
2FC1D0DEDA03616BF6A463E13729C17C7159889C8871E1D372714F8C62DF84CE
611003CB6C0A68A7A4B47CD955E99A14C216F7322A55927E1B794ED33A4D6EFF
216C60EDF5FDDBD5189E429A7E8542C599D4E6BDF98BAEAC991990A0DB13C2E3
333DB7459E51DE2CCDB86C2E1EE7E89133236517D25526BAD00D4DAC9782B3F9
2DC1E56BA3356F66D1234234536ED76DE09CC164A08FC3820C37F4EB8842956E
779558869593C192D85246829E5EFC14E3287BF46D62C4FD0F4F860676A3B46E
C913EC30AB9B2C1023ED4066686DC3D52CF815DFE9D6E5CC0A839B2D3C067963
B089CD0FDCCE6C0A77899CEF7A2A9AFA8138B3CBB4736CFCA978164BA8EE3647
BFBCAF5A8BAD5D9E6B03F699FFEE5B7FB9F34A31386F07D66ABC40B5D1616D76
ED110BD00B18235356314F81AA06B640C28151E5E105A45CC1BC7652B9E76547
827EFD90798F41EFF7ABF192B267D8B04CA8D3F2307C8F88CBF47F32CD5EA975
45133FDE429EEAE9D72900EE63C9FAC7572B638E6F15E496FDB0C73278CD4B41
D701E6220B001FEB969BEC9AE4561AC4F28A2C7B1E12CDFF9BD8E3219D3C6FB6
3633C64308EA4D6FB80EFBCABEB2292778F35E26B1ECDA7786F84962F4531D5E
54C9F370E2431E28C32938F70DA3AF073C9DED0369646F6B36693E9A3C0BE494
25D5DD09F60C7E4966B4FAEB0406B72F8FF605BD06D6EDF7125AC8AB538565E0
6699AE5D68759A52096B795DB2EF9C31FCC01FCDD51BD6740F4BDE2445C5EFF7
7DC4099ECDE895F7C8D181F4C52F3CE2C9F941C27426AFD980D935E487C20BB5
3D87CEF1C564E90FEA605DC6AEC13C58C0E63DCCBECA12B839EC2CBFFF7FC9AC
13F612CEE0812A9D877F399CCEF8F3649C5C29291BE31C3427B6F30174DF45A0
B3BCD6478ED664774225E83D3E036A99EBB1A93C5A22632DD205AF0786A79AFD
DB23227CCD9E144D8D3BC19ADEA42AE0AB3741CE1DEF5B751D3B44C8C29E8266
F18F7C2B8810D01F7456C58AEA498BF279BB45445B9C83229C5598E2574FB40C
4F06CB4B0848DA6E721364AAAEB4B0BE5CE51D102BC0EC8B0E3E69D117EC67CF
71B8B3368DB2A746A4C4DD82301322BADD90F85E9E2FA6AE92C834411DF3AD02
0FCA1CA35CD9827AB2409E53C623B7F42EECD3D54BB7682DDF4D6DB9326A5B02
89BD3EAD7FE395C9E2D7796D0B65DA99E50C23B86ED6A12BAE4928D7E9A413AB
D16D16B96D45876CC27253A753D54F31C686C7A1AEE0A56BE808DD4BEF789F5C
887E2FAAFBB8FEA608D2065DDC2B50A46D7C503C233895B9C85CB71F40B47A15
C7EE363C4A2456A830CDA44383B7A931B9A4EA5D97CB9EDFCE6441053B441538
A57DDBF92FEFA47BB266D80F2D9FC4F98965263953F2708917AA769506DC7154
A9C08745FF822B984069E6174AA98843C5018F4EDEE2FF2187797F2F1DE918D0
1791384A67CBA6BB9BD20EBEE2DDB9A3636B715E6909B472A8B415AB19D9C705
7F03E996C9801843C4715E5F04505A8376AA7B92AF2FA5144D7868166DCE8453
451C97A624864B7F44820C0C8F59BCAAF6DC986C7FBCE8412A970E0795787E33
6B984C4A47ADA81CF88468788F814B58DBE8733C1ADEF908414A8786C28D0F4A
1BE236A44AD7EFC5E64390DFC26249951526794E064BF561B8D501CF79A8C3A6
1CF50D7278E7E6AE89058F3E4A6F5A33C2B19037D3C708CC2F0A252C242E8A5E
FD84113176A190E60C409D96FCFA824EB1A73271011BD9217A0701E65107ADD1
131E05F41ED4956805008FF966CC755F8961B96EFE1C01877FA9E574F80A1C64
AF0BBC8CEFDB33DE258942A2DC0C9BBBDBB0617FA20AE6D9B8741C08B3A04E3B
377120769F8BB38FFCC6C327AE5A32D19BBF74DB6F97AA73F102FA3AA93A437B
D5C61AA3F0E825097D29D8A5A12BFF2FBA278C93A9BB6BAD4529E91C03B49A52
DDAB5A2767F43196E018920AE5CCE2A222449DF9A3CD78C8BF7556BF51AA1912
0315CF5C564191A816A9C2B847B671C0F551FD41822FB77ABAEB316EB94750B4
019450B1ECACC7DC4D5F11A4AF94496CBF34A074CB3BC8C175E5BE25C1D67192
3A24942855502CC9A9747A1CEC3C50962679C494D424020A17D463AAAC6AF97A
53AFDFA04626C9F7FC7D7C31FE41A030BAED3FD791C41A216D80487E0B6F110E
2D8717F850AA9B853A8B9E76B74493C7D5EFFD6D021A670FEF229039791DCBED
2BF4D1ED3B53872B2B143B033EB517F54662744B43A961BEA737F995F050F604
9AD78B2CEF315D843D46ECE2BFAB533A21B565EDB9307869759A8CDF99E2253E
807EEEE33D8F945E88036622990200464D347F4C8E282E9C9DC96993C728B393
5EC2E5BA36DC4496F0D438F673A1A79BDEF712D3BCB9C138F549309340F72A56
A42E429FA8975232EC5D6EB9BD1FA5B601D308A13D4C4AB47B607ED358E7DE52
288086AE6C2F8486510CD9694B83A423D761FD175DCA240FD5C2098317B975E8
78DD5C5712EE0E7C3913DEEBAD3BC547A084FAD477A1C18564AE9B2E82A7FFAD
8A825F8D8802BAD38C859692085E8007EC4DBD4ACFBEA5F841A1A0A79EAA3133
08182D51EA274E15DFAD9BCFD2BEDA8979FD8D8AA47E9DFE44F5935A948BD198
473A2EE9FFCDA384FDFFA609EC9CD9ED7B1C564626D9B7D4395DA3C9C876A81A
BDFAF36918D0C7D2C6AB18DD33C7067EC0DDB9A05367A00FD82EDDB952FB1D01
44530CED9C68B67AA172A5443D004E9ADC6A5AADB6F3EBA1F533EA2FF55DC67D
50CFD7E6E7B6D81390B941DDC01069C0BDA4EC83B9F7C24257BB056904035D32
35BA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 17761075 18089984 1000 600 600 (title.dvi)
@start /Fa 203[33 33 33 50[{ T1Encoding ReEncodeFont }3
58.1154 /SFRB0700 rf /Fb 134[33 33 2[37 18 33 22 2[37
37 1[15 2[15 1[37 1[37 37 33 37 37 13[44 48 1[44 12[48
44 44 65[{ TeXBase1Encoding ReEncodeFont }22 66.4176
/NimbusSanL-Regu rf /Fc 200[42 4[42 50[{ T1Encoding ReEncodeFont }2
83.022 /SFRB1000 rf /Fd 144[56 75[53 44 6[58 51 55 49
1[54 50 48 29 1[54 43 1[48 54 58 59 11[{}17 83.022 /EURB10
rf /Fe 136[65 1[51 1[46 32 2[51 51 1[23 2[23 1[51 1[46
51 46 1[46 11[60 51 4[65 6[60 2[55 60 1[60 66[{
 TeXBase1Encoding ReEncodeFont }20 83.022 /NimbusSanL-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black -600 -600
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -600 -600 a -600 -600 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 -600 a -600 -600 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -600
-600 a 0 TeXcolorgray -600 1692 a
 tx@Dict begin /mtrxc CM def CP CP T STV newpath /ArrowA { moveto }
def /ArrowB { } def  0.8 SLW 0  setgray   0. true 0.0 0.0 271.0125
276.03125 .5 Frame  clip newpath mtrxc setmatrix moveto 0 setgray end
 -600 1692 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 1 1  setrgbcolor   0. true -1.00374 -1.00374 272.01624 277.03499
.5 Frame  gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.71114 SLW 0.8 0.8 0.8  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 2.41867 8.2511 11.2103 9.30392 37.75667 11.95009 64.41722
13.91335 91.19109 15.25053 117.9936 15.93346 144.85301 16.01898 171.65553
15.47847 198.45805 14.34012 225.1464 12.57614 251.72142 10.1006 269.36198
8.05226   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve  gsave 0.71114
SLW 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.71114 SLW 0.8 0.8 0.8  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 1.05281 51.75554 15.50668 52.80836 41.54118 54.34483 67.63213
55.48276 93.75172 56.2512 119.89998 56.64932 146.0478 56.67798 172.19604
56.3363 198.31564 55.65338 224.40659 54.57233 250.46931 53.09274 267.79729
51.8693   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve  gsave 0.71114
SLW 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.71114 SLW 0.8 0.8 0.8  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 2.10564 95.03206 7.82433 95.23132 33.57402 95.99934 59.2955
96.6254 85.07385 97.02396 110.82355 97.2801 136.57324 97.33698 162.35117
97.25145 188.10086 96.9953 213.851 96.56853 239.6007 95.94247 265.32173
95.11758 268.1954 95.03206   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve
 gsave 0.71114 SLW 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.42271 SLW 0.8 0.8 0.8  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 2.75992 137.99597 14.1695 137.99597 39.77678 137.99597 65.41273
137.99597 91.02046 137.99597 116.65642 137.99597 142.26372 137.99597
167.89966 137.99597 193.50696 137.99597 219.1429 137.99597 244.75064
137.99597 267.54114 137.99597   1. 0.1 0.  /c ED /b ED /a ED false
OpenCurve  gsave 1.42271 SLW 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.71114 SLW 0.8 0.8 0.8  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 2.10564 180.95946 7.82433 180.76018 33.57402 179.99216 59.2955
179.36612 85.07385 178.96756 110.82355 178.71184 136.57324 178.65497
162.35117 178.74007 188.10086 178.99622 213.851 179.42299 239.6007
180.04904 265.32173 180.87393 268.1954 180.95946   1. 0.1 0.  /c ED
/b ED /a ED false OpenCurve  gsave 0.71114 SLW 0.8 0.8 0.8  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.71114 SLW 0.8 0.8 0.8  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 1.05281 224.23598 15.50668 223.18315 41.54118 221.64667
67.63213 220.50876 93.75172 219.74074 119.89998 219.34218 146.0478
219.31352 172.19604 219.65521 198.31564 220.33813 224.40659 221.41917
250.46931 222.89877 267.79729 224.12222   1. 0.1 0.  /c ED /b ED /a
ED false OpenCurve  gsave 0.71114 SLW 0.8 0.8 0.8  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.71114 SLW 0.8 0.8 0.8  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 2.41867 267.74042 11.2103 266.68759 37.75667 264.04141 64.41722
262.07817 91.19109 260.74098 117.9936 260.05804 144.85301 259.97252
171.65553 260.51347 198.45805 261.6514 225.1464 263.41536 251.72142
265.89091 269.36198 267.9397   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve
 gsave 0.71114 SLW 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.71114 SLW 0.8 0.8 0.8  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 243.64093 273.91452 243.64093 273.91452 247.9942 250.29869
251.46527 226.62599 254.08278 202.8682 255.90407 179.05309 256.87135
155.20976 257.07063 131.36644 256.44458 107.5231 254.99364 83.70801
252.71736 59.92155 249.64442 36.19197 245.68927 12.57614 243.64093
2.07698   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve  gsave 0.71114
SLW 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.71114 SLW 0.8 0.8 0.8  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 189.03995 274.79672 189.55225 269.675 191.68611 246.71388
193.3932 223.69545 194.67352 200.70567 195.52707 177.65901 196.01115
154.64058 196.09625 131.59393 195.81187 108.54727 195.1003 85.52884
193.9906 62.51085 192.48279 39.49242 190.54819 16.50264 189.03995 1.19522
  1. 0.1 0.  /c ED /b ED /a ED false OpenCurve  gsave 0.71114 SLW 0.8
0.8 0.8  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.71114 SLW 0.8 0.8 0.8  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 135.15053 275.90642 135.15053 268.30916 135.15053 245.5473
135.15053 222.75638 135.15053 199.99452 135.15053 177.23224 135.15053
154.44131 135.15053 131.67946 135.15053 108.88852 135.15053 86.12624
135.15053 63.33574 135.15053 40.57346 135.15053 17.78296 135.15053
0.08553   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve  gsave 0.71114
SLW 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.71114 SLW 0.8 0.8 0.8  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 81.26111 274.79672 80.74881 269.675 78.61493 246.71388 76.90784
223.69545 75.62752 200.70567 74.77397 177.65901 74.28989 154.64058
74.2048 131.59393 74.48917 108.54727 75.20074 85.52884 76.31044 62.51085
77.81827 39.49242 79.75285 16.50264 81.26111 1.19522   1. 0.1 0.  /c
ED /b ED /a ED false OpenCurve  gsave 0.71114 SLW 0.8 0.8 0.8  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.71114 SLW 0.8 0.8 0.8  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 26.66011 273.91452 26.66011 273.91452 22.30684 250.29869
18.83578 226.62599 16.21826 202.8682 14.39699 179.05309 13.42969 155.20976
13.23041 131.36644 13.85646 107.5231 15.3074 83.70801 17.58368 59.92155
20.65663 36.19197 24.61177 12.57614 26.66011 2.07698   1. 0.1 0.  /c
ED /b ED /a ED false OpenCurve  gsave 0.71114 SLW 0.8 0.8 0.8  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5123 SLW 0.3 0.3 0.3  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 268.05344 223.04118 244.75064 226.36984 218.51686 229.30081
192.22664 231.40604 165.87953 232.74323 139.53244 233.25552 113.18492
232.99937 86.86604 231.94655 60.5476 230.09749 34.2856 227.42267 8.08047
223.92294 2.2476 223.04118   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve
 gsave 0.5123 SLW 0.3 0.3 0.3  setrgbcolor  1. .setopacityalpha   0
 setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
0.4 0.4 0.4 TeXcolorrgb -600 1692 a
tx@Dict begin /mtrxc CM def STV CP translate newpath /ArrowA { moveto
} def /ArrowB { } def  0.5123 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def  [ 142.40617 146.13339 129.06157 146.13339
115.71739 146.13339   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve
  mtrxc setmatrix 0 setgray end
 -600 1692 a -821
1692 a
tx@TextPathDict begin currentpoint pop /Hoffset exch def end
 -821 1692 a -821 1692 a
tx@TextPathDict begin currentpoint pop /Voffset exch def end
 -821 1692 a -600 1692
a
/tx@TextPathSavedShow /show load def tx@Dict begin PathLength end dup
0 gt { tx@TextPathDict begin .5 InitTextPath end /show { tx@TextPathDict
begin TextPathShow end } def } { pop } ifelse
 -600 1692 a 0.4 0.4 0.4 TeXcolorrgb Fe(Orion)p 0.4 0.4 0.4
TeXcolorrgb -379 1692 a
currentpoint newpath moveto /show /tx@TextPathSavedShow load def
 -379 1692 a 0.4 0.4 0.4 TeXcolorrgb
-600 1692 a
tx@Dict begin /mtrxc CM def STV CP translate newpath /ArrowA { moveto
} def /ArrowB { } def  0.5123 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def  [ 186.22322 205.6282 176.63449 205.42892
167.0744 205.28653   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve 
 mtrxc setmatrix 0 setgray end
 -600 1692 a -757 1692 a
tx@TextPathDict begin currentpoint pop /Hoffset exch def end
 -757 1692 a -757
1692 a
tx@TextPathDict begin currentpoint pop /Voffset exch def end
 -757 1692 a -600 1692 a
/tx@TextPathSavedShow /show load def tx@Dict begin PathLength end dup
0 gt { tx@TextPathDict begin .5 InitTextPath end /show { tx@TextPathDict
begin TextPathShow end } def } { pop } ifelse
 -600 1692 a 0.4 0.4 0.4
TeXcolorrgb Fe(Bull)p 0.4 0.4 0.4 TeXcolorrgb -443 1692
a
currentpoint newpath moveto /show /tx@TextPathSavedShow load def
 -443 1692 a 0.4 0.4 0.4 TeXcolorrgb -600 1692 a
tx@Dict begin /mtrxc CM def STV CP translate newpath /ArrowA { moveto
} def /ArrowB { } def  0.5123 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def  [ 53.00766 216.9236 38.89503 217.57831
24.83928 218.34633   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve 
 mtrxc setmatrix 0 setgray end
 -600
1692 a -830 1692 a
tx@TextPathDict begin currentpoint pop /Hoffset exch def end
 -830 1692 a -830 1692 a
tx@TextPathDict begin currentpoint pop /Voffset exch def end
 -830 1692
a -600 1692 a
/tx@TextPathSavedShow /show load def tx@Dict begin PathLength end dup
0 gt { tx@TextPathDict begin 1 InitTextPath end /show { tx@TextPathDict
begin TextPathShow end } def } { pop } ifelse
 -600 1692 a 0.4 0.4 0.4 TeXcolorrgb 66
x Fe(T)-5 b(wins)p 0.4 0.4 0.4 TeXcolorrgb -370 1692
a
currentpoint newpath moveto /show /tx@TextPathSavedShow load def
 -370 1692 a 0.4 0.4 0.4 TeXcolorrgb -600 1692 a
tx@Dict begin /mtrxc CM def STV CP translate newpath /ArrowA { moveto
} def /ArrowB { } def  0.5123 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def  [ 111.02245 97.28015 92.01602 97.10909
73.03825 96.85338   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve  
mtrxc setmatrix 0 setgray end
 -600
1692 a -914 1692 a
tx@TextPathDict begin currentpoint pop /Hoffset exch def end
 -914 1692 a -914 1692 a
tx@TextPathDict begin currentpoint pop /Voffset exch def end
 -914 1692
a -600 1692 a
/tx@TextPathSavedShow /show load def tx@Dict begin PathLength end dup
0 gt { tx@TextPathDict begin 1 InitTextPath end /show { tx@TextPathDict
begin TextPathShow end } def } { pop } ifelse
 -600 1692 a 0.4 0.4 0.4 TeXcolorrgb Fe(Unicorn)p
0.4 0.4 0.4 TeXcolorrgb -286 1692 a
currentpoint newpath moveto /show /tx@TextPathSavedShow load def
 -286 1692 a 0.4 0.4 0.4
TeXcolorrgb -600 1692 a
tx@Dict begin /mtrxc CM def STV CP translate newpath /ArrowA { moveto
} def /ArrowB { } def  0.5123 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def  [ 175.38283 44.01633 163.97324 44.24382
152.56366 44.41487   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve 
 mtrxc setmatrix 0 setgray end
 -600 1692 a -785 1692 a
tx@TextPathDict begin currentpoint pop /Hoffset exch def end
 -785
1692 a -785 1692 a
tx@TextPathDict begin currentpoint pop /Voffset exch def end
 -785 1692 a -600 1692 a
/tx@TextPathSavedShow /show load def tx@Dict begin PathLength end dup
0 gt { tx@TextPathDict begin .5 InitTextPath end /show { tx@TextPathDict
begin TextPathShow end } def } { pop } ifelse
 -600 1692
a 0.4 0.4 0.4 TeXcolorrgb 66 x Fe(Hare)p 0.4 0.4 0.4
TeXcolorrgb -415 1692 a
currentpoint newpath moveto /show /tx@TextPathSavedShow load def
 -415 1692 a 0.4 0.4 0.4 TeXcolorrgb
-600 1692 a
tx@Dict begin /mtrxc CM def STV CP translate newpath /ArrowA { moveto
} def /ArrowB { } def  0.5123 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def  [ 127.49687 56.67801 107.92128 56.50694
88.37433 56.13748   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve  
mtrxc setmatrix 0 setgray end
 -600 1692 a -918 1692 a
tx@TextPathDict begin currentpoint pop /Hoffset exch def end
 -918 1692 a -918
1692 a
tx@TextPathDict begin currentpoint pop /Voffset exch def end
 -918 1692 a -600 1692 a
/tx@TextPathSavedShow /show load def tx@Dict begin PathLength end dup
0 gt { tx@TextPathDict begin 0 InitTextPath end /show { tx@TextPathDict
begin TextPathShow end } def } { pop } ifelse
 -600 1692 a 0.4 0.4 0.4
TeXcolorrgb 66 x Fe(Big)23 b(Dog)p 0.4 0.4 0.4 TeXcolorrgb
-282 1692 a
currentpoint newpath moveto /show /tx@TextPathSavedShow load def
 -282 1692 a 0.4 0.4 0.4 TeXcolorrgb -600
1692 a
tx@Dict begin /mtrxc CM def STV CP translate newpath /ArrowA { moveto
} def /ArrowB { } def  0.5123 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def  [ 257.72502 52.60912 236.0442 53.97496
214.30609 55.02779   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve 
 mtrxc setmatrix 0 setgray end
 -600 1692 a -954 1692 a
tx@TextPathDict begin currentpoint pop /Hoffset exch def end
 -954 1692 a -954 1692
a
tx@TextPathDict begin currentpoint pop /Voffset exch def end
 -954 1692 a -600 1692 a
/tx@TextPathSavedShow /show load def tx@Dict begin PathLength end dup
0 gt { tx@TextPathDict begin 1 InitTextPath end /show { tx@TextPathDict
begin TextPathShow end } def } { pop } ifelse
 -600 1692 a 0.4 0.4 0.4 TeXcolorrgb
Fe(Eridan)o(us)p 0.4 0.4 0.4 TeXcolorrgb -246 1692 a
currentpoint newpath moveto /show /tx@TextPathSavedShow load def

-246 1692 a -354 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   261.4239
241.36467 1.731   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   259.85878
240.99477 1.298   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   263.87079
241.62082 1.251   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   262.78932
242.61633 1.127   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   262.6187
240.79549 0.857   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   263.30162
243.10042 0.726   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   140.0161
168.09894 2.663   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   218.17561
206.59541 2.547   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   170.43208
163.91629 2.263   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   166.50558
254.68062 2.259   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   156.83133
224.06535 1.665   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   206.0831
166.7331 1.564   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   225.5163
204.20538 1.443   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   254.39581
191.08871 1.4   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   224.43524
218.00499 1.363   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   160.16042
178.45569 1.449   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   234.36523
203.55112 1.285   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   204.83144
161.12772 1.257   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   201.92912
148.0397 1.237   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   230.60936
211.43233 1.208   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   225.57317
204.6035 1.15   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   253.42851
163.43265 1.096   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   198.60002
193.6207 0.962   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   158.42467
175.80952 0.944   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   164.74118
162.23741 0.837   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   226.31296
231.12166 0.816   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   219.93958
180.2483 0.784   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   216.98082
189.92215 0.761   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   225.17505
233.25552 0.75   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   209.83897
233.02803 0.75   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   240.42558
175.41096 0.738   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   227.96318
212.91193 0.738   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   246.25845
231.49156 0.651   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   205.08716
174.72847 0.651   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   162.37982
213.76547 0.624   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   140.6135
220.42323 0.581   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   160.5021
176.63441 0.581   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   182.58147
149.71814 0.501   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   197.57585
145.05228 0.484   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   227.90631
203.2381 0.447   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   34.54175
159.90427 2.701   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   37.04552
255.73344 2.446   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   97.8775
204.94519 2.15   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   113.04295
229.64206 1.726   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   47.23164
172.50908 1.716   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   93.41049
240.73862 1.675   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   120.81041
229.5283 1.513   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   89.91077
190.74704 1.467   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   57.84456
229.12976 1.363   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   35.67967
240.51112 1.337   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   58.0434
206.50987 1.331   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   72.8676
222.67128 1.187   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   55.11285
253.48538 1.187   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   45.09778
250.38422 0.971   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   132.7605
177.20358 0.916   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   106.95393
220.36635 0.887   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   131.19537
232.54439 0.877   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   39.46376
259.17584 0.75   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   46.29257
175.18347 0.702   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   120.92415
257.98105 0.664   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   127.63878
198.03128 0.566   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   111.05104
156.68936 0.709   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   86.55345
147.86908 0.484   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   123.2573
195.78323 0.466   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   91.24796
192.08467 0.447   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   10.9828
147.95418 0.61   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   191.79987
274.36995 1.819   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   249.04703
273.71524 1.741   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   49.36552
271.04085 2.283   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   54.25931
270.21553 0.857   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   69.79466
262.7611 0.581   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   256.70073
80.43578 1.691   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   262.6187
38.2121 0.805   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   269.04895
85.9274 0.566   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   181.01633
104.45016 2.783   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   159.30687
133.10175 2.24   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   154.69746
130.0861 2.157   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   147.47052
98.67418 2.097   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   163.60327
136.77252 2.032   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   161.95305
65.38452 1.87   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   160.01802
113.92471 1.78   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   188.01578
117.14006 1.771   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   165.99329
53.34889 1.746   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   187.70274
46.2357 1.564   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   181.69926
71.67238 1.496   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   171.22876
128.20796 1.467   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   148.09657
77.70451 1.35   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   150.1167
46.69113 1.381   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   178.02892
110.02687 1.318   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   138.73578
80.40756 1.244   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   143.5727
53.12138 1.172   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   156.74623
127.41129 1.227   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   216.52539
78.61493 1.127   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   220.08199
124.05397 1.08   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   210.77805
124.53761 1.006   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   244.49448
109.14467 0.988   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   171.57
106.1286 0.897   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   186.42242
102.11702 0.761   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   175.49649
84.163 0.738   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   212.7413
56.45006 0.702   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   181.86987
85.0452 0.651   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   203.12434
115.51807 0.61   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   240.90924
105.78735 0.55   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   182.9227
89.39847 0.518   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   160.41658
113.55481 0.619   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   90.59369
69.62404 3.237   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   80.77747
19.03506 2.316   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   70.70508
29.19254 2.185   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   112.84367
64.90086 2.129   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   57.41779
16.36023 1.929   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   74.88773
39.94785 1.655   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   31.35506
33.23277 1.478   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   77.53389
23.1604 1.4   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   64.81534
27.34303 1.142   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   83.4805
38.8095 1.127   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   33.26143
97.8775 1.08   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   99.30022
59.40924 1.064   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   39.03699
16.47398 1.056   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   120.12747
112.47377 1.039   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   80.8912
88.60179 0.962   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   71.9854
73.63562 0.916   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   62.11229
135.9472 0.887   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   22.98978
41.02888 0.837   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   104.62079
42.50848 0.69   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   79.80972
68.00203 0.638   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   60.37654
34.6555 0.596   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   97.9626
63.53502 0.55   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   44.55682
44.8985 0.518   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   42.33786
25.80656 1.175   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   106.01486
109.34395 1.091   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   13.74272
34.20007 1.761   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   4.6094
125.22055 0.677   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   9.21883
55.62515 0.596   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   212.51337
11.15341 1.165   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   116.42848
15.6491 1.655   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   115.29056
1.90636 1.142   1. .setopacityalpha  SD  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   90.08139
4.89378 1.056   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5123 SLW 0 0 0  setrgbcolor   109.6852
5.26369 0.466   1. .setopacityalpha  SD  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 165.36723
133.47165 178.91069 108.40488    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 169.46436
160.04668 164.51369 140.41422    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 153.84392
126.33025 148.32407 102.37317    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 141.60944
164.03004 153.30339 133.69958    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 238.23485
305.8101 247.96555 276.98747    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 163.85942
257.61116 136.5446 287.97028    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 189.01172
272.17877 169.6354 257.09886    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 182.43906
316.05312 191.03185 277.78413    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 214.07849
207.76198 160.07533 223.15492    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 226.5409 215.75693
228.61789 213.53796    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 169.8629 252.54675
221.84595 219.62656    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 145.16603
78.55806 141.55257 79.58223    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 159.27866
67.77454 150.40106 75.68439    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 165.36723
66.46556 178.62631 70.70508    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 164.88359
56.62111 163.09097 61.99855    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 147.92595
48.85321 145.62103 51.10127    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 162.8066 52.01169
152.96214 47.88593    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 184.60158
47.25987 169.2655 52.26784    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 208.18875
123.68407 191.31621 118.2211    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 217.29341
124.19638 213.4811 124.39522    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 242.18956
110.5674 222.472 122.60303    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 255.36354
83.5656 245.5473 106.66913    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 271.46764
94.69081 259.14763 82.79758    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 264.92361
39.20804 274.62567 43.39026    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 215.04579
12.51927 260.39929 37.01686    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 219.85448
-2.47554 213.87921 8.621    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 44.78476 170.09041
37.67157 163.00587    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 96.36925 239.0884
110.0551 231.34915    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 52.66595 268.76459
90.62192 242.64499    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 39.66304 258.977
46.86176 267.9397    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 55.93819 231.54843
39.60616 252.46121    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 70.19278 223.8092
60.66135 227.90631    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 94.74768 207.16458
75.22897 220.9924    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 60.5476 133.89842
34.93987 100.12512    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 103.62483
110.79489 64.3317 134.61    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 117.42444
111.87637 108.74655 109.94135    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 95.4306 68.59943
109.0878 65.69754    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 76.45241 42.9066
88.28877 65.24211    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 72.09915 32.83466
73.66428 36.81802    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 113.09982
15.96211 84.78905 18.66516    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 67.88829 26.48949
60.0353 18.89265    /Lineto /lineto load def 0  setlinejoin false Line
 gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 135.7197 -4.89378
117.9936 0.99594    /Lineto /lineto load def 0  setlinejoin false Line
 gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 34.00124 31.44016
39.94785 27.42856    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 24.8675 39.29314
29.02191 35.3953    /Lineto /lineto load def 0  setlinejoin false Line
 gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  0.99594 SLW
0.5 0.5 0.5  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def  [ 16.53085 36.24884
20.941 39.52107    /Lineto /lineto load def 0  setlinejoin false Line
 gsave 0.99594 SLW 0.5 0.5 0.5  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 0 0 TeXcolorrgb 1496 -348
a Fd(\021)p 0 0 0 TeXcolorrgb 1457 -238 a Fc(27)p 0 0 0
TeXcolorrgb 194 312 a Fb(Betelgeuse)p 0 0 0 TeXcolorrgb
884 49 a(Aldebar)o(an)p 0 0 0 TeXcolorrgb 848 343 a Fd(\015)p
0 0 0 TeXcolorrgb 701 -341 a(\014)p 0 0 0 TeXcolorrgb
630 -145 a(\020)p 0 0 0 TeXcolorrgb 1138 341 a(\031)1193
311 y Fa(3)p 0 0 0 TeXcolorrgb 1227 90 a Fd(#)1280 60
y Fa(2)p 0 0 0 TeXcolorrgb 1538 134 a Fd(\025)p 0 0 0
TeXcolorrgb 1281 -136 a(")p 0 0 0 TeXcolorrgb 748 192
a(\025)p 0 0 0 TeXcolorrgb 1371 14 a(\015)p 0 0 0 TeXcolorrgb
1118 439 a(\031)1173 409 y Fa(4)p 0 0 0 TeXcolorrgb -582
324 a Fb(Procy)o(on)p 0 0 0 TeXcolorrgb -494 -457 a(P)m(ollux)p
0 0 0 TeXcolorrgb 245 3 a Fd(\015)p 0 0 0 TeXcolorrgb
312 -259 a(\026)p 0 0 0 TeXcolorrgb -180 281 a(\014)p
0 0 0 TeXcolorrgb 195 -327 a(")p 0 0 0 TeXcolorrgb 422
-155 a(\021)p 0 0 0 TeXcolorrgb 71 132 a(\030)p 0 0 0
TeXcolorrgb -186 -134 a(\016)p 0 0 0 TeXcolorrgb -370
-323 a(\024)p 0 0 0 TeXcolorrgb -93 6 a(\025)p 0 0 0
TeXcolorrgb 1013 -525 a(\023)p 0 0 0 TeXcolorrgb 1404
-502 a(\020)p 0 0 0 TeXcolorrgb -419 -535 a Fb(Castor)p
0 0 0 TeXcolorrgb 1457 1084 a Fd(\015)p 0 0 0 TeXcolorrgb
725 898 a Fb(Rigel)p 0 0 0 TeXcolorrgb 609 635 a Fd(\020)p
0 0 0 TeXcolorrgb 554 850 a(\024)p 0 0 0 TeXcolorrgb
789 585 a(\016)p 0 0 0 TeXcolorrgb 664 1210 a(\013)p
0 0 0 TeXcolorrgb 758 766 a(\023)p 0 0 0 TeXcolorrgb
882 683 a(\014)p 0 0 0 TeXcolorrgb 798 1213 a(\014)p
0 0 0 TeXcolorrgb 986 1328 a(")p 0 0 0 TeXcolorrgb 935
1109 a(\026)p 0 0 0 TeXcolorrgb 749 686 a(\021)p 0 0 0
TeXcolorrgb 647 1018 a(\020)p 0 0 0 TeXcolorrgb 574 1363
a(\015)p 0 0 0 TeXcolorrgb 181 1083 a Fb(Sir)q(ius)p
0 0 0 TeXcolorrgb 3 1598 a Fd(")p 0 0 0 TeXcolorrgb -84
1426 a(\016)p 0 0 0 TeXcolorrgb 369 1174 a(\014)p 0 0 0
TeXcolorrgb -199 1519 a(\021)p 0 0 0 TeXcolorrgb -91
1340 a(o)-35 1310 y Fa(2)p 0 0 0 TeXcolorrgb -321 1387
a Fd(\030)p 0 0 0 TeXcolorrgb 62 1481 a(\033)p 0 0 0
TeXcolorrgb -557 1372 a(\032)p 0 0 0 TeXcolorrgb 395
1586 a(\020)-600 1692 y
currentpoint initclip moveto
 -600 1692 a 0 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 0.4 0.4 0.4 TeXcolorrgb
0.4 0.4 0.4 TeXcolorrgb 0.4 0.4 0.4 TeXcolorrgb 0.4 0.4 0.4
TeXcolorrgb 0.4 0.4 0.4 TeXcolorrgb 0.4 0.4 0.4 TeXcolorrgb
0.4 0.4 0.4 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
